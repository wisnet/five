{"version":3,"sources":["/Users/riad/Workspace/a8c/gutenberg/packages/i18n/src/index.js"],"names":["Tannin","memoize","sprintfjs","DEFAULT_LOCALE_DATA","plural_forms","logErrorOnce","console","error","i18n","setLocaleData","data","domain","dcnpgettext","context","single","plural","number","undefined","__","text","_x","_n","_nx","sprintf","format","args","toString"],"mappings":";;AAAA;;;AAGA,OAAOA,MAAP,MAAmB,QAAnB;AACA,OAAOC,OAAP,MAAoB,QAApB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA;;;;;;;AAMA,IAAMC,mBAAmB,GAAG;AAC3B,MAAI;AACHC,IAAAA,YAAY,EAAE;AADX;AADuB,CAA5B;AAMA;;;;;;;;AAOA,IAAMC,YAAY,GAAGJ,OAAO,CAAEK,OAAO,CAACC,KAAV,CAA5B,C,CAA+C;;AAE/C;;;;;;AAKA,IAAMC,IAAI,GAAG,IAAIR,MAAJ,CAAY,EAAZ,CAAb;AAEA;;;;;;;;;;AASA,OAAO,SAASS,aAAT,CAAwBC,IAAxB,EAAmD;AAAA,MAArBC,MAAqB,uEAAZ,SAAY;AACzDH,EAAAA,IAAI,CAACE,IAAL,CAAWC,MAAX,sBACIR,mBADJ,EAEIK,IAAI,CAACE,IAAL,CAAWC,MAAX,CAFJ,EAGID,IAHJ,EADyD,CAOzD;AACA;;AACAF,EAAAA,IAAI,CAACE,IAAL,CAAWC,MAAX,EAAqB,EAArB,sBACIR,mBAAmB,CAAE,EAAF,CADvB,EAEIK,IAAI,CAACE,IAAL,CAAWC,MAAX,EAAqB,EAArB,CAFJ;AAIA;AAED;;;;;;;;;;;;;;;AAcA,SAASC,WAAT,GAA4E;AAAA,MAAtDD,MAAsD,uEAA7C,SAA6C;AAAA,MAAlCE,OAAkC;AAAA,MAAzBC,MAAyB;AAAA,MAAjBC,MAAiB;AAAA,MAATC,MAAS;;AAC3E,MAAK,CAAER,IAAI,CAACE,IAAL,CAAWC,MAAX,CAAP,EAA6B;AAC5BF,IAAAA,aAAa,CAAEQ,SAAF,EAAaN,MAAb,CAAb;AACA;;AAED,SAAOH,IAAI,CAACI,WAAL,CAAkBD,MAAlB,EAA0BE,OAA1B,EAAmCC,MAAnC,EAA2CC,MAA3C,EAAmDC,MAAnD,CAAP;AACA;AAED;;;;;;;;;;;;AAUA,OAAO,SAASE,EAAT,CAAaC,IAAb,EAAmBR,MAAnB,EAA4B;AAClC,SAAOC,WAAW,CAAED,MAAF,EAAUM,SAAV,EAAqBE,IAArB,CAAlB;AACA;AAED;;;;;;;;;;;;AAWA,OAAO,SAASC,EAAT,CAAaD,IAAb,EAAmBN,OAAnB,EAA4BF,MAA5B,EAAqC;AAC3C,SAAOC,WAAW,CAAED,MAAF,EAAUE,OAAV,EAAmBM,IAAnB,CAAlB;AACA;AAED;;;;;;;;;;;;;;;AAcA,OAAO,SAASE,EAAT,CAAaP,MAAb,EAAqBC,MAArB,EAA6BC,MAA7B,EAAqCL,MAArC,EAA8C;AACpD,SAAOC,WAAW,CAAED,MAAF,EAAUM,SAAV,EAAqBH,MAArB,EAA6BC,MAA7B,EAAqCC,MAArC,CAAlB;AACA;AAED;;;;;;;;;;;;;;;;AAeA,OAAO,SAASM,GAAT,CAAcR,MAAd,EAAsBC,MAAtB,EAA8BC,MAA9B,EAAsCH,OAAtC,EAA+CF,MAA/C,EAAwD;AAC9D,SAAOC,WAAW,CAAED,MAAF,EAAUE,OAAV,EAAmBC,MAAnB,EAA2BC,MAA3B,EAAmCC,MAAnC,CAAlB;AACA;AAED;;;;;;;;;;;;AAWA,OAAO,SAASO,OAAT,CAAkBC,MAAlB,EAAoC;AAC1C,MAAI;AAAA,sCAD+BC,IAC/B;AAD+BA,MAAAA,IAC/B;AAAA;;AACH,WAAOvB,SAAS,CAACqB,OAAV,OAAArB,SAAS,GAAUsB,MAAV,SAAqBC,IAArB,EAAhB;AACA,GAFD,CAEE,OAAQlB,KAAR,EAAgB;AACjBF,IAAAA,YAAY,CAAE,wBAAwBE,KAAK,CAACmB,QAAN,EAA1B,CAAZ;AAEA,WAAOF,MAAP;AACA;AACD","sourcesContent":["/**\n * External dependencies\n */\nimport Tannin from 'tannin';\nimport memoize from 'memize';\nimport sprintfjs from 'sprintf-js';\n\n/**\n * Default locale data to use for Tannin domain when not otherwise provided.\n * Assumes an English plural forms expression.\n *\n * @type {Object}\n */\nconst DEFAULT_LOCALE_DATA = {\n\t'': {\n\t\tplural_forms: 'plural=(n!=1)',\n\t},\n};\n\n/**\n * Log to console, once per message; or more precisely, per referentially equal\n * argument set. Because Jed throws errors, we log these to the console instead\n * to avoid crashing the application.\n *\n * @param {...*} args Arguments to pass to `console.error`\n */\nconst logErrorOnce = memoize( console.error ); // eslint-disable-line no-console\n\n/**\n * The underlying instance of Tannin to which exported functions interface.\n *\n * @type {Tannin}\n */\nconst i18n = new Tannin( {} );\n\n/**\n * Merges locale data into the Tannin instance by domain. Accepts data in a\n * Jed-formatted JSON object shape.\n *\n * @see http://messageformat.github.io/Jed/\n *\n * @param {?Object} data   Locale data configuration.\n * @param {?string} domain Domain for which configuration applies.\n */\nexport function setLocaleData( data, domain = 'default' ) {\n\ti18n.data[ domain ] = {\n\t\t...DEFAULT_LOCALE_DATA,\n\t\t...i18n.data[ domain ],\n\t\t...data,\n\t};\n\n\t// Populate default domain configuration (supported locale date which omits\n\t// a plural forms expression).\n\ti18n.data[ domain ][ '' ] = {\n\t\t...DEFAULT_LOCALE_DATA[ '' ],\n\t\t...i18n.data[ domain ][ '' ],\n\t};\n}\n\n/**\n * Wrapper for Tannin's `dcnpgettext`. Populates default locale data if not\n * otherwise previously assigned.\n *\n * @param {?string} domain  Domain to retrieve the translated text.\n * @param {?string} context Context information for the translators.\n * @param {string}  single  Text to translate if non-plural. Used as fallback\n *                          return value on a caught error.\n * @param {?string} plural  The text to be used if the number is plural.\n * @param {?number} number  The number to compare against to use either the\n *                          singular or plural form.\n *\n * @return {string} The translated string.\n */\nfunction dcnpgettext( domain = 'default', context, single, plural, number ) {\n\tif ( ! i18n.data[ domain ] ) {\n\t\tsetLocaleData( undefined, domain );\n\t}\n\n\treturn i18n.dcnpgettext( domain, context, single, plural, number );\n}\n\n/**\n * Retrieve the translation of text.\n *\n * @see https://developer.wordpress.org/reference/functions/__/\n *\n * @param {string}  text   Text to translate.\n * @param {?string} domain Domain to retrieve the translated text.\n *\n * @return {string} Translated text.\n */\nexport function __( text, domain ) {\n\treturn dcnpgettext( domain, undefined, text );\n}\n\n/**\n * Retrieve translated string with gettext context.\n *\n * @see https://developer.wordpress.org/reference/functions/_x/\n *\n * @param {string}  text    Text to translate.\n * @param {string}  context Context information for the translators.\n * @param {?string} domain  Domain to retrieve the translated text.\n *\n * @return {string} Translated context string without pipe.\n */\nexport function _x( text, context, domain ) {\n\treturn dcnpgettext( domain, context, text );\n}\n\n/**\n * Translates and retrieves the singular or plural form based on the supplied\n * number.\n *\n * @see https://developer.wordpress.org/reference/functions/_n/\n *\n * @param {string}  single The text to be used if the number is singular.\n * @param {string}  plural The text to be used if the number is plural.\n * @param {number}  number The number to compare against to use either the\n *                         singular or plural form.\n * @param {?string} domain Domain to retrieve the translated text.\n *\n * @return {string} The translated singular or plural form.\n */\nexport function _n( single, plural, number, domain ) {\n\treturn dcnpgettext( domain, undefined, single, plural, number );\n}\n\n/**\n * Translates and retrieves the singular or plural form based on the supplied\n * number, with gettext context.\n *\n * @see https://developer.wordpress.org/reference/functions/_nx/\n *\n * @param {string}  single  The text to be used if the number is singular.\n * @param {string}  plural  The text to be used if the number is plural.\n * @param {number}  number  The number to compare against to use either the\n *                          singular or plural form.\n * @param {string}  context Context information for the translators.\n * @param {?string} domain  Domain to retrieve the translated text.\n *\n * @return {string} The translated singular or plural form.\n */\nexport function _nx( single, plural, number, context, domain ) {\n\treturn dcnpgettext( domain, context, single, plural, number );\n}\n\n/**\n * Returns a formatted string. If an error occurs in applying the format, the\n * original format string is returned.\n *\n * @param {string}   format  The format of the string to generate.\n * @param {string[]} ...args Arguments to apply to the format.\n *\n * @see http://www.diveintojavascript.com/projects/javascript-sprintf\n *\n * @return {string} The formatted string.\n */\nexport function sprintf( format, ...args ) {\n\ttry {\n\t\treturn sprintfjs.sprintf( format, ...args );\n\t} catch ( error ) {\n\t\tlogErrorOnce( 'sprintf error: \\n\\n' + error.toString() );\n\n\t\treturn format;\n\t}\n}\n"]}