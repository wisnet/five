{"version":3,"sources":["/Users/riad/Workspace/a8c/gutenberg/packages/blocks/src/api/templates.js"],"names":["doBlocksMatchTemplate","blocks","template","length","index","name","innerBlocksTemplate","block","innerBlocks","synchronizeBlocksWithTemplate","attributes","blockType","isHTMLAttribute","attributeDefinition","isQueryAttribute","normalizeAttributes","schema","values","value","key","normalizeAttribute","definition","map","subValues","query","normalizedAttributes"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { every, map, get, mapValues, isArray } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { renderToString } from '@wordpress/element';\n\n/**\n * Internal dependencies\n */\nimport { createBlock } from './factory';\nimport { getBlockType } from './registration';\n\n/**\n * Checks whether a list of blocks matches a template by comparing the block names.\n *\n * @param {Array} blocks    Block list.\n * @param {Array} template  Block template.\n *\n * @return {boolean}        Whether the list of blocks matches a templates\n */\nexport function doBlocksMatchTemplate( blocks = [], template = [] ) {\n\treturn (\n\t\tblocks.length === template.length &&\n\t\tevery( template, ( [ name, , innerBlocksTemplate ], index ) => {\n\t\t\tconst block = blocks[ index ];\n\t\t\treturn (\n\t\t\t\tname === block.name &&\n\t\t\t\tdoBlocksMatchTemplate( block.innerBlocks, innerBlocksTemplate )\n\t\t\t);\n\t\t} )\n\t);\n}\n\n/**\n * Synchronize a block list with a block template.\n *\n * Synchronizing a block list with a block template means that we loop over the blocks\n * keep the block as is if it matches the block at the same position in the template\n * (If it has the same name) and if doesn't match, we create a new block based on the template.\n * Extra blocks not present in the template are removed.\n *\n * @param {Array} blocks    Block list.\n * @param {Array} template  Block template.\n *\n * @return {Array}          Updated Block list.\n */\nexport function synchronizeBlocksWithTemplate( blocks = [], template ) {\n\t// If no template is provided, return blocks unmodified.\n\tif ( ! template ) {\n\t\treturn blocks;\n\t}\n\n\treturn map( template, ( [ name, attributes, innerBlocksTemplate ], index ) => {\n\t\tconst block = blocks[ index ];\n\n\t\tif ( block && block.name === name ) {\n\t\t\tconst innerBlocks = synchronizeBlocksWithTemplate( block.innerBlocks, innerBlocksTemplate );\n\t\t\treturn { ...block, innerBlocks };\n\t\t}\n\n\t\t// To support old templates that were using the \"children\" format\n\t\t// for the attributes using \"html\" strings now, we normalize the template attributes\n\t\t// before creating the blocks.\n\n\t\tconst blockType = getBlockType( name );\n\t\tconst isHTMLAttribute = ( attributeDefinition ) => get( attributeDefinition, [ 'source' ] ) === 'html';\n\t\tconst isQueryAttribute = ( attributeDefinition ) => get( attributeDefinition, [ 'source' ] ) === 'query';\n\n\t\tconst normalizeAttributes = ( schema, values ) => {\n\t\t\treturn mapValues( values, ( value, key ) => {\n\t\t\t\treturn normalizeAttribute( schema[ key ], value );\n\t\t\t} );\n\t\t};\n\t\tconst normalizeAttribute = ( definition, value ) => {\n\t\t\tif ( isHTMLAttribute( definition ) && isArray( value ) ) {\n\t\t\t\t// Introduce a deprecated call at this point\n\t\t\t\t// When we're confident that \"children\" format should be removed from the templates.\n\n\t\t\t\treturn renderToString( value );\n\t\t\t}\n\n\t\t\tif ( isQueryAttribute( definition ) && value ) {\n\t\t\t\treturn value.map( ( subValues ) => {\n\t\t\t\t\treturn normalizeAttributes( definition.query, subValues );\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\treturn value;\n\t\t};\n\n\t\tconst normalizedAttributes = normalizeAttributes(\n\t\t\tget( blockType, [ 'attributes' ], {} ),\n\t\t\tattributes\n\t\t);\n\n\t\treturn createBlock(\n\t\t\tname,\n\t\t\tnormalizedAttributes,\n\t\t\tsynchronizeBlocksWithTemplate( [], innerBlocksTemplate )\n\t\t);\n\t} );\n}\n"]}