{"version":3,"sources":["/Users/riad/Workspace/a8c/gutenberg/packages/blocks/src/api/raw-handling/utils.js"],"names":["window","Node","ELEMENT_NODE","TEXT_NODE","getBlockContentSchema","transforms","schemas","map","isMatch","blockName","schema","tag","attributes","push","mergeWith","objValue","srcValue","key","undefined","isEmpty","element","hasChildNodes","Array","from","childNodes","every","node","nodeType","nodeValue","trim","nodeName","hasAttributes","isPlain","HTML","test","deepFilterNodeList","nodeList","filters","doc","forEach","item","contains","deepFilterHTML","document","implementation","createHTMLDocument","body","innerHTML","cleanNodeList","inline","toLowerCase","hasOwnProperty","classes","children","require","name","removeAttribute","classList","length","mattchers","className","RegExp","noop","some","remove","querySelector","join","firstChild","nextElementSibling","createElement","removeInvalidHTML"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { mergeWith, includes, noop } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { unwrap, insertAfter, remove } from '@wordpress/dom';\nimport { hasBlockSupport } from '..';\n\n/**\n * Internal dependencies\n */\nimport { isPhrasingContent } from './phrasing-content';\n\n/**\n * Browser dependencies\n */\nconst { ELEMENT_NODE, TEXT_NODE } = window.Node;\n\n/**\n * Given raw transforms from blocks, merges all schemas into one.\n *\n * @param {Array} transforms Block transforms, of the `raw` type.\n *\n * @return {Object} A complete block content schema.\n */\nexport function getBlockContentSchema( transforms ) {\n\tconst schemas = transforms.map( ( { isMatch, blockName, schema } ) => {\n\t\t// If the block supports the \"anchor\" functionality, it needs to keep its ID attribute.\n\t\tif ( hasBlockSupport( blockName, 'anchor' ) ) {\n\t\t\tfor ( const tag in schema ) {\n\t\t\t\tif ( ! schema[ tag ].attributes ) {\n\t\t\t\t\tschema[ tag ].attributes = [];\n\t\t\t\t}\n\t\t\t\tschema[ tag ].attributes.push( 'id' );\n\t\t\t}\n\t\t}\n\n\t\t// If an isMatch function exists add it to each schema tag that it applies to.\n\t\tif ( isMatch ) {\n\t\t\tfor ( const tag in schema ) {\n\t\t\t\tschema[ tag ].isMatch = isMatch;\n\t\t\t}\n\t\t}\n\t\treturn schema;\n\t} );\n\n\treturn mergeWith( {}, ...schemas, ( objValue, srcValue, key ) => {\n\t\tswitch ( key ) {\n\t\t\tcase 'children': {\n\t\t\t\tif ( objValue === '*' || srcValue === '*' ) {\n\t\t\t\t\treturn '*';\n\t\t\t\t}\n\n\t\t\t\treturn { ...objValue, ...srcValue };\n\t\t\t}\n\t\t\tcase 'attributes':\n\t\t\tcase 'require': {\n\t\t\t\treturn [ ...( objValue || [] ), ...( srcValue || [] ) ];\n\t\t\t}\n\t\t\tcase 'isMatch': {\n\t\t\t\t// If one of the values being merge is undefined (matches everything),\n\t\t\t\t// the result of the merge will be undefined.\n\t\t\t\tif ( ! objValue || ! srcValue ) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\t// When merging two isMatch functions, the result is a new function\n\t\t\t\t// that returns if one of the source functions returns true.\n\t\t\t\treturn ( ...args ) => {\n\t\t\t\t\treturn objValue( ...args ) || srcValue( ...args );\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t} );\n}\n\n/**\n * Recursively checks if an element is empty. An element is not empty if it\n * contains text or contains elements with attributes such as images.\n *\n * @param {Element} element The element to check.\n *\n * @return {boolean} Wether or not the element is empty.\n */\nexport function isEmpty( element ) {\n\tif ( ! element.hasChildNodes() ) {\n\t\treturn true;\n\t}\n\n\treturn Array.from( element.childNodes ).every( ( node ) => {\n\t\tif ( node.nodeType === TEXT_NODE ) {\n\t\t\treturn ! node.nodeValue.trim();\n\t\t}\n\n\t\tif ( node.nodeType === ELEMENT_NODE ) {\n\t\t\tif ( node.nodeName === 'BR' ) {\n\t\t\t\treturn true;\n\t\t\t} else if ( node.hasAttributes() ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn isEmpty( node );\n\t\t}\n\n\t\treturn true;\n\t} );\n}\n\n/**\n * Checks wether HTML can be considered plain text. That is, it does not contain\n * any elements that are not line breaks.\n *\n * @param {string} HTML The HTML to check.\n *\n * @return {boolean} Wether the HTML can be considered plain text.\n */\nexport function isPlain( HTML ) {\n\treturn ! /<(?!br[ />])/i.test( HTML );\n}\n\n/**\n * Given node filters, deeply filters and mutates a NodeList.\n *\n * @param {NodeList} nodeList The nodeList to filter.\n * @param {Array}    filters  An array of functions that can mutate with the provided node.\n * @param {Document} doc      The document of the nodeList.\n * @param {Object}   schema   The schema to use.\n */\nexport function deepFilterNodeList( nodeList, filters, doc, schema ) {\n\tArray.from( nodeList ).forEach( ( node ) => {\n\t\tdeepFilterNodeList( node.childNodes, filters, doc, schema );\n\n\t\tfilters.forEach( ( item ) => {\n\t\t\t// Make sure the node is still attached to the document.\n\t\t\tif ( ! doc.contains( node ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\titem( node, doc, schema );\n\t\t} );\n\t} );\n}\n\n/**\n * Given node filters, deeply filters HTML tags.\n * Filters from the deepest nodes to the top.\n *\n * @param {string} HTML    The HTML to filter.\n * @param {Array}  filters An array of functions that can mutate with the provided node.\n * @param {Object} schema  The schema to use.\n *\n * @return {string} The filtered HTML.\n */\nexport function deepFilterHTML( HTML, filters = [], schema ) {\n\tconst doc = document.implementation.createHTMLDocument( '' );\n\n\tdoc.body.innerHTML = HTML;\n\n\tdeepFilterNodeList( doc.body.childNodes, filters, doc, schema );\n\n\treturn doc.body.innerHTML;\n}\n\n/**\n * Given a schema, unwraps or removes nodes, attributes and classes on a node\n * list.\n *\n * @param {NodeList} nodeList The nodeList to filter.\n * @param {Document} doc      The document of the nodeList.\n * @param {Object}   schema   An array of functions that can mutate with the provided node.\n * @param {Object}   inline   Whether to clean for inline mode.\n */\nfunction cleanNodeList( nodeList, doc, schema, inline ) {\n\tArray.from( nodeList ).forEach( ( node ) => {\n\t\tconst tag = node.nodeName.toLowerCase();\n\n\t\t// It's a valid child, if the tag exists in the schema without an isMatch\n\t\t// function, or with an isMatch function that matches the node.\n\t\tif (\n\t\t\tschema.hasOwnProperty( tag ) &&\n\t\t\t( ! schema[ tag ].isMatch || schema[ tag ].isMatch( node ) )\n\t\t) {\n\t\t\tif ( node.nodeType === ELEMENT_NODE ) {\n\t\t\t\tconst { attributes = [], classes = [], children, require = [] } = schema[ tag ];\n\n\t\t\t\t// If the node is empty and it's supposed to have children,\n\t\t\t\t// remove the node.\n\t\t\t\tif ( isEmpty( node ) && children ) {\n\t\t\t\t\tremove( node );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif ( node.hasAttributes() ) {\n\t\t\t\t\t// Strip invalid attributes.\n\t\t\t\t\tArray.from( node.attributes ).forEach( ( { name } ) => {\n\t\t\t\t\t\tif ( name !== 'class' && ! includes( attributes, name ) ) {\n\t\t\t\t\t\t\tnode.removeAttribute( name );\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\n\t\t\t\t\t// Strip invalid classes.\n\t\t\t\t\tif ( node.classList.length ) {\n\t\t\t\t\t\tconst mattchers = classes.map( ( item ) => {\n\t\t\t\t\t\t\tif ( typeof item === 'string' ) {\n\t\t\t\t\t\t\t\treturn ( className ) => className === item;\n\t\t\t\t\t\t\t} else if ( item instanceof RegExp ) {\n\t\t\t\t\t\t\t\treturn ( className ) => item.test( className );\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn noop;\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t\tArray.from( node.classList ).forEach( ( name ) => {\n\t\t\t\t\t\t\tif ( ! mattchers.some( ( isMatch ) => isMatch( name ) ) ) {\n\t\t\t\t\t\t\t\tnode.classList.remove( name );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t\tif ( ! node.classList.length ) {\n\t\t\t\t\t\t\tnode.removeAttribute( 'class' );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ( node.hasChildNodes() ) {\n\t\t\t\t\t// Do not filter any content.\n\t\t\t\t\tif ( children === '*' ) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Continue if the node is supposed to have children.\n\t\t\t\t\tif ( children ) {\n\t\t\t\t\t\t// If a parent requires certain children, but it does\n\t\t\t\t\t\t// not have them, drop the parent and continue.\n\t\t\t\t\t\tif ( require.length && ! node.querySelector( require.join( ',' ) ) ) {\n\t\t\t\t\t\t\tcleanNodeList( node.childNodes, doc, schema, inline );\n\t\t\t\t\t\t\tunwrap( node );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcleanNodeList( node.childNodes, doc, children, inline );\n\t\t\t\t\t// Remove children if the node is not supposed to have any.\n\t\t\t\t\t} else {\n\t\t\t\t\t\twhile ( node.firstChild ) {\n\t\t\t\t\t\t\tremove( node.firstChild );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t// Invalid child. Continue with schema at the same place and unwrap.\n\t\t} else {\n\t\t\tcleanNodeList( node.childNodes, doc, schema, inline );\n\n\t\t\t// For inline mode, insert a line break when unwrapping nodes that\n\t\t\t// are not phrasing content.\n\t\t\tif ( inline && ! isPhrasingContent( node ) && node.nextElementSibling ) {\n\t\t\t\tinsertAfter( doc.createElement( 'br' ), node );\n\t\t\t}\n\n\t\t\tunwrap( node );\n\t\t}\n\t} );\n}\n\n/**\n * Given a schema, unwraps or removes nodes, attributes and classes on HTML.\n *\n * @param {string} HTML   The HTML to clean up.\n * @param {Object} schema Schema for the HTML.\n * @param {Object} inline Whether to clean for inline mode.\n *\n * @return {string} The cleaned up HTML.\n */\nexport function removeInvalidHTML( HTML, schema, inline ) {\n\tconst doc = document.implementation.createHTMLDocument( '' );\n\n\tdoc.body.innerHTML = HTML;\n\n\tcleanNodeList( doc.body.childNodes, doc, schema, inline );\n\n\treturn doc.body.innerHTML;\n}\n"]}