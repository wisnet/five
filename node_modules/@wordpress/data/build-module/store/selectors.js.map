{"version":3,"sources":["/Users/riad/Workspace/a8c/gutenberg/packages/data/src/store/selectors.js"],"names":["get","getIsResolving","state","reducerKey","selectorName","args","map","hasStartedResolution","undefined","hasFinishedResolution","isResolving","getCachedResolvers","hasOwnProperty"],"mappings":"AAAA;;;AAGA,SAASA,GAAT,QAAoB,QAApB;AAEA;;;;;;;;;;;;;;AAaA,OAAO,SAASC,cAAT,CAAyBC,KAAzB,EAAgCC,UAAhC,EAA4CC,YAA5C,EAA0DC,IAA1D,EAAiE;AACvE,MAAMC,GAAG,GAAGN,GAAG,CAAEE,KAAF,EAAS,CAAEC,UAAF,EAAcC,YAAd,CAAT,CAAf;;AACA,MAAK,CAAEE,GAAP,EAAa;AACZ;AACA;;AAED,SAAOA,GAAG,CAACN,GAAJ,CAASK,IAAT,CAAP;AACA;AAED;;;;;;;;;;;;AAWA,OAAO,SAASE,oBAAT,CAA+BL,KAA/B,EAAsCC,UAAtC,EAAkDC,YAAlD,EAA4E;AAAA,MAAZC,IAAY,uEAAL,EAAK;AAClF,SAAOJ,cAAc,CAAEC,KAAF,EAASC,UAAT,EAAqBC,YAArB,EAAmCC,IAAnC,CAAd,KAA4DG,SAAnE;AACA;AAED;;;;;;;;;;;;AAWA,OAAO,SAASC,qBAAT,CAAgCP,KAAhC,EAAuCC,UAAvC,EAAmDC,YAAnD,EAA6E;AAAA,MAAZC,IAAY,uEAAL,EAAK;AACnF,SAAOJ,cAAc,CAAEC,KAAF,EAASC,UAAT,EAAqBC,YAArB,EAAmCC,IAAnC,CAAd,KAA4D,KAAnE;AACA;AAED;;;;;;;;;;;;AAWA,OAAO,SAASK,WAAT,CAAsBR,KAAtB,EAA6BC,UAA7B,EAAyCC,YAAzC,EAAmE;AAAA,MAAZC,IAAY,uEAAL,EAAK;AACzE,SAAOJ,cAAc,CAAEC,KAAF,EAASC,UAAT,EAAqBC,YAArB,EAAmCC,IAAnC,CAAd,KAA4D,IAAnE;AACA;AAED;;;;;;;;;AAQA,OAAO,SAASM,kBAAT,CAA6BT,KAA7B,EAAoCC,UAApC,EAAiD;AACvD,SAAOD,KAAK,CAACU,cAAN,CAAsBT,UAAtB,IAAqCD,KAAK,CAAEC,UAAF,CAA1C,GAA2D,EAAlE;AACA","sourcesContent":["/**\n * External dependencies\n */\nimport { get } from 'lodash';\n\n/**\n * Returns the raw `isResolving` value for a given reducer key, selector name,\n * and arguments set. May be undefined if the selector has never been resolved\n * or not resolved for the given set of arguments, otherwise true or false for\n * resolution started and completed respectively.\n *\n * @param {Object} state        Data state.\n * @param {string} reducerKey   Registered store reducer key.\n * @param {string} selectorName Selector name.\n * @param {Array}  args         Arguments passed to selector.\n *\n * @return {?boolean} isResolving value.\n */\nexport function getIsResolving( state, reducerKey, selectorName, args ) {\n\tconst map = get( state, [ reducerKey, selectorName ] );\n\tif ( ! map ) {\n\t\treturn;\n\t}\n\n\treturn map.get( args );\n}\n\n/**\n * Returns true if resolution has already been triggered for a given reducer\n * key, selector name, and arguments set.\n *\n * @param {Object} state        Data state.\n * @param {string} reducerKey   Registered store reducer key.\n * @param {string} selectorName Selector name.\n * @param {?Array} args         Arguments passed to selector (default `[]`).\n *\n * @return {boolean} Whether resolution has been triggered.\n */\nexport function hasStartedResolution( state, reducerKey, selectorName, args = [] ) {\n\treturn getIsResolving( state, reducerKey, selectorName, args ) !== undefined;\n}\n\n/**\n * Returns true if resolution has completed for a given reducer key, selector\n * name, and arguments set.\n *\n * @param {Object} state        Data state.\n * @param {string} reducerKey   Registered store reducer key.\n * @param {string} selectorName Selector name.\n * @param {?Array} args         Arguments passed to selector.\n *\n * @return {boolean} Whether resolution has completed.\n */\nexport function hasFinishedResolution( state, reducerKey, selectorName, args = [] ) {\n\treturn getIsResolving( state, reducerKey, selectorName, args ) === false;\n}\n\n/**\n * Returns true if resolution has been triggered but has not yet completed for\n * a given reducer key, selector name, and arguments set.\n *\n * @param {Object} state        Data state.\n * @param {string} reducerKey   Registered store reducer key.\n * @param {string} selectorName Selector name.\n * @param {?Array} args         Arguments passed to selector.\n *\n * @return {boolean} Whether resolution is in progress.\n */\nexport function isResolving( state, reducerKey, selectorName, args = [] ) {\n\treturn getIsResolving( state, reducerKey, selectorName, args ) === true;\n}\n\n/**\n * Returns the list of the cached resolvers.\n *\n * @param {Object} state      Data state.\n * @param {string} reducerKey Registered store reducer key.\n *\n * @return {Object} Resolvers mapped by args and selectorName.\n */\nexport function getCachedResolvers( state, reducerKey ) {\n\treturn state.hasOwnProperty( reducerKey ) ? state[ reducerKey ] : {};\n}\n"]}