{"version":3,"sources":["/Users/riad/Workspace/a8c/gutenberg/packages/blocks/src/api/raw-handling/shortcode-converter.js"],"names":["segmentHTMLToShortcodeBlock","HTML","lastIndex","transformsFrom","transformation","transform","type","tag","test","transformTags","transformTag","match","beforeHTML","substr","index","content","length","shortcode","attributes","schema","attrs","block","blockName"],"mappings":";;;;;;;;;;;;;AAGA;;AAKA;;AAKA;;AACA;;AACA;;AAfA;;;;AAKA;;;;AAKA;;;AAOA,SAASA,2BAAT,CAAsCC,IAAtC,EAA4D;AAAA,MAAhBC,SAAgB,uEAAJ,CAAI;AAC3D;AACA,MAAMC,cAAc,GAAG,iCAAoB,MAApB,CAAvB;AAEA,MAAMC,cAAc,GAAG,4BAAeD,cAAf,EAA+B,UAAEE,SAAF;AAAA,WACrDA,SAAS,CAACC,IAAV,KAAmB,WAAnB,IACA,kBAAM,uBAAWD,SAAS,CAACE,GAArB,CAAN,EAAkC,UAAEA,GAAF;AAAA,aAAW,uBAAQA,GAAR,EAAcC,IAAd,CAAoBP,IAApB,CAAX;AAAA,KAAlC,CAFqD;AAAA,GAA/B,CAAvB;;AAKA,MAAK,CAAEG,cAAP,EAAwB;AACvB,WAAO,CAAEH,IAAF,CAAP;AACA;;AAED,MAAMQ,aAAa,GAAG,uBAAWL,cAAc,CAACG,GAA1B,CAAtB;AACA,MAAMG,YAAY,GAAG,mBAAOD,aAAP,CAArB;AAEA,MAAIE,KAAJ;;AAEA,MAAOA,KAAK,GAAG,qBAAMD,YAAN,EAAoBT,IAApB,EAA0BC,SAA1B,CAAf,EAAyD;AACxD,QAAMU,UAAU,GAAGX,IAAI,CAACY,MAAL,CAAa,CAAb,EAAgBF,KAAK,CAACG,KAAtB,CAAnB;AAEAZ,IAAAA,SAAS,GAAGS,KAAK,CAACG,KAAN,GAAcH,KAAK,CAACI,OAAN,CAAcC,MAAxC,CAHwD,CAKxD;AACA;AACA;AACA;;AACA,QACC,CAAE,sBAAUL,KAAK,CAACM,SAAN,CAAgBF,OAAhB,IAA2B,EAArC,EAAyC,GAAzC,CAAF,IACA,CAAE,eAAeP,IAAf,CAAqBI,UAArB,CAFH,EAGE;AACD,aAAOZ,2BAA2B,CAAEC,IAAF,EAAQC,SAAR,CAAlC;AACA;;AAED,QAAMgB,UAAU,GAAG,uBAClB,oBAAQd,cAAc,CAACc,UAAvB,EAAmC,UAAEC,MAAF;AAAA,aAAcA,MAAM,CAACF,SAArB;AAAA,KAAnC,CADkB,EAElB;AACA;AACA;AACA;AACA,cAAEE,MAAF;AAAA,aAAcA,MAAM,CAACF,SAAP,CAAkBN,KAAK,CAACM,SAAN,CAAgBG,KAAlC,EAAyCT,KAAzC,CAAd;AAAA,KANkB,CAAnB;AASA,QAAMU,KAAK,GAAG,0BACbjB,cAAc,CAACkB,SADF,EAEb,gEAEK,gCAAclB,cAAc,CAACkB,SAA7B,CAFL;AAGEJ,MAAAA,UAAU,EAAEd,cAAc,CAACc;AAH7B,QAKCP,KAAK,CAACM,SAAN,CAAgBF,OALjB,EAMCG,UAND,CAFa,CAAd;AAYA,YACCN,UADD,EAECS,KAFD,0CAGIrB,2BAA2B,CAAEC,IAAI,CAACY,MAAL,CAAaX,SAAb,CAAF,CAH/B;AAKA;;AAED,SAAO,CAAED,IAAF,CAAP;AACA;;eAEcD,2B","sourcesContent":["/**\n * External dependencies\n */\nimport { some, castArray, first, mapValues, pickBy, includes } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { regexp, next } from '@wordpress/shortcode';\n\n/**\n * Internal dependencies\n */\nimport { createBlock, getBlockTransforms, findTransform } from '../factory';\nimport { getBlockType } from '../registration';\nimport { getBlockAttributes } from '../parser';\n\nfunction segmentHTMLToShortcodeBlock( HTML, lastIndex = 0 ) {\n\t// Get all matches.\n\tconst transformsFrom = getBlockTransforms( 'from' );\n\n\tconst transformation = findTransform( transformsFrom, ( transform ) => (\n\t\ttransform.type === 'shortcode' &&\n\t\tsome( castArray( transform.tag ), ( tag ) => regexp( tag ).test( HTML ) )\n\t) );\n\n\tif ( ! transformation ) {\n\t\treturn [ HTML ];\n\t}\n\n\tconst transformTags = castArray( transformation.tag );\n\tconst transformTag = first( transformTags );\n\n\tlet match;\n\n\tif ( ( match = next( transformTag, HTML, lastIndex ) ) ) {\n\t\tconst beforeHTML = HTML.substr( 0, match.index );\n\n\t\tlastIndex = match.index + match.content.length;\n\n\t\t// If the shortcode content does not contain HTML and the shortcode is\n\t\t// not on a new line (or in paragraph from Markdown converter),\n\t\t// consider the shortcode as inline text, and thus skip conversion for\n\t\t// this segment.\n\t\tif (\n\t\t\t! includes( match.shortcode.content || '', '<' ) &&\n\t\t\t! /(\\n|<p>)\\s*$/.test( beforeHTML )\n\t\t) {\n\t\t\treturn segmentHTMLToShortcodeBlock( HTML, lastIndex );\n\t\t}\n\n\t\tconst attributes = mapValues(\n\t\t\tpickBy( transformation.attributes, ( schema ) => schema.shortcode ),\n\t\t\t// Passing all of `match` as second argument is intentionally broad\n\t\t\t// but shouldn't be too relied upon.\n\t\t\t//\n\t\t\t// See: https://github.com/WordPress/gutenberg/pull/3610#discussion_r152546926\n\t\t\t( schema ) => schema.shortcode( match.shortcode.attrs, match ),\n\t\t);\n\n\t\tconst block = createBlock(\n\t\t\ttransformation.blockName,\n\t\t\tgetBlockAttributes(\n\t\t\t\t{\n\t\t\t\t\t...getBlockType( transformation.blockName ),\n\t\t\t\t\tattributes: transformation.attributes,\n\t\t\t\t},\n\t\t\t\tmatch.shortcode.content,\n\t\t\t\tattributes,\n\t\t\t)\n\t\t);\n\n\t\treturn [\n\t\t\tbeforeHTML,\n\t\t\tblock,\n\t\t\t...segmentHTMLToShortcodeBlock( HTML.substr( lastIndex ) ),\n\t\t];\n\t}\n\n\treturn [ HTML ];\n}\n\nexport default segmentHTMLToShortcodeBlock;\n"]}