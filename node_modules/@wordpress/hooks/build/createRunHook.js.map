{"version":3,"sources":["/Users/riad/Workspace/a8c/gutenberg/packages/hooks/src/createRunHook.js"],"names":["createRunHook","hooks","returnFirstArg","runHooks","hookName","handlers","runs","args","length","undefined","hookInfo","name","currentIndex","__current","push","handler","result","callback","apply","pop"],"mappings":";;;;;;;AAAA;;;;;;;;;;;AAWA,SAASA,aAAT,CAAwBC,KAAxB,EAA+BC,cAA/B,EAAgD;AAC/C;;;;;;;;AAQA,SAAO,SAASC,QAAT,CAAmBC,QAAnB,EAAuC;AAC7C,QAAK,CAAEH,KAAK,CAAEG,QAAF,CAAZ,EAA2B;AAC1BH,MAAAA,KAAK,CAAEG,QAAF,CAAL,GAAoB;AACnBC,QAAAA,QAAQ,EAAE,EADS;AAEnBC,QAAAA,IAAI,EAAE;AAFa,OAApB;AAIA;;AAEDL,IAAAA,KAAK,CAAEG,QAAF,CAAL,CAAkBE,IAAlB;AAEA,QAAMD,QAAQ,GAAGJ,KAAK,CAAEG,QAAF,CAAL,CAAkBC,QAAnC;;AAV6C,sCAAPE,IAAO;AAAPA,MAAAA,IAAO;AAAA;;AAY7C,QAAK,CAAEF,QAAF,IAAc,CAAEA,QAAQ,CAACG,MAA9B,EAAuC;AACtC,aAAON,cAAc,GACpBK,IAAI,CAAE,CAAF,CADgB,GAEpBE,SAFD;AAGA;;AAED,QAAMC,QAAQ,GAAG;AAChBC,MAAAA,IAAI,EAAEP,QADU;AAEhBQ,MAAAA,YAAY,EAAE;AAFE,KAAjB;;AAKAX,IAAAA,KAAK,CAACY,SAAN,CAAgBC,IAAhB,CAAsBJ,QAAtB;;AAEA,WAAQA,QAAQ,CAACE,YAAT,GAAwBP,QAAQ,CAACG,MAAzC,EAAkD;AACjD,UAAMO,OAAO,GAAGV,QAAQ,CAAEK,QAAQ,CAACE,YAAX,CAAxB;AAEA,UAAMI,MAAM,GAAGD,OAAO,CAACE,QAAR,CAAiBC,KAAjB,CAAwB,IAAxB,EAA8BX,IAA9B,CAAf;;AACA,UAAKL,cAAL,EAAsB;AACrBK,QAAAA,IAAI,CAAE,CAAF,CAAJ,GAAYS,MAAZ;AACA;;AAEDN,MAAAA,QAAQ,CAACE,YAAT;AACA;;AAEDX,IAAAA,KAAK,CAACY,SAAN,CAAgBM,GAAhB;;AAEA,QAAKjB,cAAL,EAAsB;AACrB,aAAOK,IAAI,CAAE,CAAF,CAAX;AACA;AACD,GAzCD;AA0CA;;eAEcP,a","sourcesContent":["/**\n * Returns a function which, when invoked, will execute all callbacks\n * registered to a hook of the specified type, optionally returning the final\n * value of the call chain.\n *\n * @param  {Object}   hooks          Stored hooks, keyed by hook name.\n * @param  {?boolean}    returnFirstArg Whether each hook callback is expected to\n *                                   return its first argument.\n *\n * @return {Function}                Function that runs hook callbacks.\n */\nfunction createRunHook( hooks, returnFirstArg ) {\n\t/**\n\t * Runs all callbacks for the specified hook.\n\t *\n\t * @param  {string} hookName The name of the hook to run.\n\t * @param  {...*}   args     Arguments to pass to the hook callbacks.\n\t *\n\t * @return {*}               Return value of runner, if applicable.\n\t */\n\treturn function runHooks( hookName, ...args ) {\n\t\tif ( ! hooks[ hookName ] ) {\n\t\t\thooks[ hookName ] = {\n\t\t\t\thandlers: [],\n\t\t\t\truns: 0,\n\t\t\t};\n\t\t}\n\n\t\thooks[ hookName ].runs++;\n\n\t\tconst handlers = hooks[ hookName ].handlers;\n\n\t\tif ( ! handlers || ! handlers.length ) {\n\t\t\treturn returnFirstArg ?\n\t\t\t\targs[ 0 ] :\n\t\t\t\tundefined;\n\t\t}\n\n\t\tconst hookInfo = {\n\t\t\tname: hookName,\n\t\t\tcurrentIndex: 0,\n\t\t};\n\n\t\thooks.__current.push( hookInfo );\n\n\t\twhile ( hookInfo.currentIndex < handlers.length ) {\n\t\t\tconst handler = handlers[ hookInfo.currentIndex ];\n\n\t\t\tconst result = handler.callback.apply( null, args );\n\t\t\tif ( returnFirstArg ) {\n\t\t\t\targs[ 0 ] = result;\n\t\t\t}\n\n\t\t\thookInfo.currentIndex++;\n\t\t}\n\n\t\thooks.__current.pop();\n\n\t\tif ( returnFirstArg ) {\n\t\t\treturn args[ 0 ];\n\t\t}\n\t};\n}\n\nexport default createRunHook;\n"]}