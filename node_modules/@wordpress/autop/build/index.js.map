{"version":3,"sources":["/Users/gziolo/PhpstormProjects/gutenberg/packages/autop/src/index.js"],"names":["htmlSplitRegex","comments","cdata","escaped","regex","RegExp","htmlSplit","input","parts","workingInput","match","push","slice","index","length","replaceInHtmlTags","haystack","replacePairs","textArr","changed","needles","Object","keys","i","j","needle","indexOf","replace","join","autop","text","br","preTags","trim","textParts","split","lastText","pop","textPart","start","name","substr","allBlocks","texts","filter","Boolean","forEach","textPiece","a","b","preTag","original","removep","html","blocklist","blocklist1","blocklist2","preserve","preserveLinebreaks","preserveBr","space","shift"],"mappings":";;;;;;;;;;;;AAAA;;;;;AAKA,IAAMA,cAAc,GAAK,YAAM;AAC9B;AACA,MAAMC,QAAQ,GACb,MAAgB;AAChB,OADA,GACgB;AACf,WAFD,GAEa;AACZ,WAHD,GAGa;AACb,MAJA,GAIgB;AAChB,YAND,CAF8B,CAQb;;AAEjB,MAAMC,KAAK,GACV,iBAAiB;AACjB,WADA,GACiB;AACjB,OAFA,GAEiB;AAChB,WAHD,GAGc;AACb,WAJD,GAIc;AACd,OALA,GAKiB;AACjB,YAPD,CAV8B,CAiBZ;;AAElB,MAAMC,OAAO,GACZ,QAAqB;AACpB,OADD,GAEA,GAFA,GAGC,cAHD,GAIA,GAJA,GAKA,SALA,GAKqB;AACpBF,EAAAA,QAND,GAOA,GAPA,GAQCC,KARD,GASA,GAVD;AAYA,MAAME,KAAK,GACV,MAAoB;AACnB,KADD,GACiB;AAChB,KAFD,GAEiB;AACfD,EAAAA,OAHF,GAGc;AACb,KAJD,GAIiB;AACf,WALF,GAKc;AACb,KAND,GAOA,GARD;AAUA,SAAO,IAAIE,MAAJ,CAAYD,KAAZ,CAAP;AACA;AACA,CA3CsB,EAAvB;AA6CA;;;;;;;;AAMA,SAASE,SAAT,CAAoBC,KAApB,EAA4B;AAC3B,MAAMC,KAAK,GAAG,EAAd;AACA,MAAIC,YAAY,GAAGF,KAAnB;AAEA,MAAIG,KAAJ;;AACA,SAAUA,KAAK,GAAGD,YAAY,CAACC,KAAb,CAAoBV,cAApB,CAAlB,EAA2D;AAC1DQ,IAAAA,KAAK,CAACG,IAAN,CAAYF,YAAY,CAACG,KAAb,CAAoB,CAApB,EAAuBF,KAAK,CAACG,KAA7B,CAAZ;AACAL,IAAAA,KAAK,CAACG,IAAN,CAAYD,KAAK,CAAE,CAAF,CAAjB;AACAD,IAAAA,YAAY,GAAGA,YAAY,CAACG,KAAb,CAAoBF,KAAK,CAACG,KAAN,GAAcH,KAAK,CAAE,CAAF,CAAL,CAAWI,MAA7C,CAAf;AACA;;AAED,MAAKL,YAAY,CAACK,MAAlB,EAA2B;AAC1BN,IAAAA,KAAK,CAACG,IAAN,CAAYF,YAAZ;AACA;;AAED,SAAOD,KAAP;AACA;AAED;;;;;;;;;AAOA,SAASO,iBAAT,CAA4BC,QAA5B,EAAsCC,YAAtC,EAAqD;AACpD;AACA,MAAMC,OAAO,GAAGZ,SAAS,CAAEU,QAAF,CAAzB;AACA,MAAIG,OAAO,GAAG,KAAd,CAHoD,CAKpD;;AACA,MAAMC,OAAO,GAAGC,MAAM,CAACC,IAAP,CAAaL,YAAb,CAAhB,CANoD,CAQpD;;AACA,OAAM,IAAIM,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAGL,OAAO,CAACJ,MAA7B,EAAqCS,CAAC,IAAI,CAA1C,EAA8C;AAC7C,SAAM,IAAIC,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAGJ,OAAO,CAACN,MAA7B,EAAqCU,CAAC,EAAtC,EAA2C;AAC1C,UAAMC,MAAM,GAAGL,OAAO,CAAEI,CAAF,CAAtB;;AACA,UAAK,CAAC,CAAD,KAAON,OAAO,CAAEK,CAAF,CAAP,CAAaG,OAAb,CAAsBD,MAAtB,CAAZ,EAA6C;AAC5CP,QAAAA,OAAO,CAAEK,CAAF,CAAP,GAAeL,OAAO,CAAEK,CAAF,CAAP,CAAaI,OAAb,CAAsB,IAAItB,MAAJ,CAAYoB,MAAZ,EAAoB,GAApB,CAAtB,EAAiDR,YAAY,CAAEQ,MAAF,CAA7D,CAAf;AACAN,QAAAA,OAAO,GAAG,IAAV,CAF4C,CAG5C;;AACA;AACA;AACD;AACD;;AAED,MAAKA,OAAL,EAAe;AACdH,IAAAA,QAAQ,GAAGE,OAAO,CAACU,IAAR,CAAc,EAAd,CAAX;AACA;;AAED,SAAOZ,QAAP;AACA;AAED;;;;;;;;;;;;;;AAYO,SAASa,KAAT,CAAgBC,IAAhB,EAAkC;AAAA,MAAZC,EAAY,uEAAP,IAAO;AACxC,MAAMC,OAAO,GAAG,EAAhB;;AAEA,MAAKF,IAAI,CAACG,IAAL,OAAgB,EAArB,EAA0B;AACzB,WAAO,EAAP;AACA,GALuC,CAOxC;;;AACAH,EAAAA,IAAI,GAAGA,IAAI,GAAG,IAAd;AAEA;;;;;AAIA,MAAKA,IAAI,CAACJ,OAAL,CAAc,MAAd,MAA2B,CAAC,CAAjC,EAAqC;AACpC,QAAMQ,SAAS,GAAGJ,IAAI,CAACK,KAAL,CAAY,QAAZ,CAAlB;AACA,QAAMC,QAAQ,GAAGF,SAAS,CAACG,GAAV,EAAjB;AACAP,IAAAA,IAAI,GAAG,EAAP;;AAEA,SAAM,IAAIP,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAGW,SAAS,CAACpB,MAA/B,EAAuCS,CAAC,EAAxC,EAA6C;AAC5C,UAAMe,QAAQ,GAAGJ,SAAS,CAAEX,CAAF,CAA1B;AACA,UAAMgB,KAAK,GAAGD,QAAQ,CAACZ,OAAT,CAAkB,MAAlB,CAAd,CAF4C,CAI5C;;AACA,UAAKa,KAAK,KAAK,CAAC,CAAhB,EAAoB;AACnBT,QAAAA,IAAI,IAAIQ,QAAR;AACA;AACA;;AAED,UAAME,IAAI,GAAG,qBAAqBjB,CAArB,GAAyB,SAAtC;AACAS,MAAAA,OAAO,CAACrB,IAAR,CAAc,CAAE6B,IAAF,EAAQF,QAAQ,CAACG,MAAT,CAAiBF,KAAjB,IAA2B,QAAnC,CAAd;AAEAT,MAAAA,IAAI,IAAIQ,QAAQ,CAACG,MAAT,CAAiB,CAAjB,EAAoBF,KAApB,IAA8BC,IAAtC;AACA;;AAEDV,IAAAA,IAAI,IAAIM,QAAR;AACA,GApCuC,CAqCxC;;;AACAN,EAAAA,IAAI,GAAGA,IAAI,CAACH,OAAL,CAAc,0BAAd,EAA0C,MAA1C,CAAP;AAEA,MAAMe,SAAS,GAAG,mPAAlB,CAxCwC,CA0CxC;;AACAZ,EAAAA,IAAI,GAAGA,IAAI,CAACH,OAAL,CAAc,IAAItB,MAAJ,CAAY,OAAOqC,SAAP,GAAmB,UAA/B,EAA2C,GAA3C,CAAd,EAAgE,QAAhE,CAAP,CA3CwC,CA6CxC;;AACAZ,EAAAA,IAAI,GAAGA,IAAI,CAACH,OAAL,CAAc,IAAItB,MAAJ,CAAY,SAASqC,SAAT,GAAqB,IAAjC,EAAuC,GAAvC,CAAd,EAA4D,QAA5D,CAAP,CA9CwC,CAgDxC;;AACAZ,EAAAA,IAAI,GAAGA,IAAI,CAACH,OAAL,CAAc,UAAd,EAA0B,IAA1B,CAAP,CAjDwC,CAmDxC;;AACAG,EAAAA,IAAI,GAAGf,iBAAiB,CAAEe,IAAF,EAAQ;AAAE,UAAM;AAAR,GAAR,CAAxB,CApDwC,CAsDxC;;AACA,MAAKA,IAAI,CAACJ,OAAL,CAAc,SAAd,MAA8B,CAAC,CAApC,EAAwC;AACvCI,IAAAA,IAAI,GAAGA,IAAI,CAACH,OAAL,CAAc,aAAd,EAA6B,SAA7B,CAAP;AACAG,IAAAA,IAAI,GAAGA,IAAI,CAACH,OAAL,CAAc,gBAAd,EAAgC,WAAhC,CAAP;AACA;AAED;;;;;;AAIA,MAAKG,IAAI,CAACJ,OAAL,CAAc,WAAd,MAAgC,CAAC,CAAtC,EAA0C;AACzCI,IAAAA,IAAI,GAAGA,IAAI,CAACH,OAAL,CAAc,qBAAd,EAAqC,IAArC,CAAP;AACAG,IAAAA,IAAI,GAAGA,IAAI,CAACH,OAAL,CAAc,gBAAd,EAAgC,WAAhC,CAAP;AACAG,IAAAA,IAAI,GAAGA,IAAI,CAACH,OAAL,CAAc,oCAAd,EAAoD,IAApD,CAAP;AACA;AAED;;;;;;AAIA,MAAKG,IAAI,CAACJ,OAAL,CAAc,SAAd,MAA8B,CAAC,CAA/B,IAAoCI,IAAI,CAACJ,OAAL,CAAc,QAAd,MAA6B,CAAC,CAAvE,EAA2E;AAC1EI,IAAAA,IAAI,GAAGA,IAAI,CAACH,OAAL,CAAc,wCAAd,EAAwD,IAAxD,CAAP;AACAG,IAAAA,IAAI,GAAGA,IAAI,CAACH,OAAL,CAAc,mCAAd,EAAmD,IAAnD,CAAP;AACAG,IAAAA,IAAI,GAAGA,IAAI,CAACH,OAAL,CAAc,kCAAd,EAAkD,IAAlD,CAAP;AACA,GA9EuC,CAgFxC;;;AACA,MAAKG,IAAI,CAACJ,OAAL,CAAc,aAAd,MAAkC,CAAC,CAAxC,EAA4C;AAC3CI,IAAAA,IAAI,GAAGA,IAAI,CAACH,OAAL,CAAc,wBAAd,EAAwC,IAAxC,CAAP;AACAG,IAAAA,IAAI,GAAGA,IAAI,CAACH,OAAL,CAAc,mBAAd,EAAmC,eAAnC,CAAP;AACA,GApFuC,CAsFxC;;;AACAG,EAAAA,IAAI,GAAGA,IAAI,CAACH,OAAL,CAAc,QAAd,EAAwB,MAAxB,CAAP,CAvFwC,CAyFxC;;AACA,MAAMgB,KAAK,GAAGb,IAAI,CAACK,KAAL,CAAY,SAAZ,EAAwBS,MAAxB,CAAgCC,OAAhC,CAAd,CA1FwC,CA4FxC;;AACAf,EAAAA,IAAI,GAAG,EAAP,CA7FwC,CA+FxC;;AACAa,EAAAA,KAAK,CAACG,OAAN,CAAe,UAAEC,SAAF,EAAiB;AAC/BjB,IAAAA,IAAI,IAAI,QAAQiB,SAAS,CAACpB,OAAV,CAAmB,YAAnB,EAAiC,EAAjC,CAAR,GAAgD,QAAxD;AACA,GAFD,EAhGwC,CAoGxC;;AACAG,EAAAA,IAAI,GAAGA,IAAI,CAACH,OAAL,CAAc,cAAd,EAA8B,EAA9B,CAAP,CArGwC,CAuGxC;;AACAG,EAAAA,IAAI,GAAGA,IAAI,CAACH,OAAL,CAAc,mCAAd,EAAmD,gBAAnD,CAAP,CAxGwC,CA0GxC;;AACAG,EAAAA,IAAI,GAAGA,IAAI,CAACH,OAAL,CAAc,IAAItB,MAAJ,CAAY,gBAAgBqC,SAAhB,GAA4B,iBAAxC,EAA2D,GAA3D,CAAd,EAAgF,IAAhF,CAAP,CA3GwC,CA6GxC;;AACAZ,EAAAA,IAAI,GAAGA,IAAI,CAACH,OAAL,CAAc,mBAAd,EAAmC,IAAnC,CAAP,CA9GwC,CAgHxC;;AACAG,EAAAA,IAAI,GAAGA,IAAI,CAACH,OAAL,CAAc,0BAAd,EAA0C,mBAA1C,CAAP;AACAG,EAAAA,IAAI,GAAGA,IAAI,CAACH,OAAL,CAAc,sBAAd,EAAsC,mBAAtC,CAAP,CAlHwC,CAoHxC;;AACAG,EAAAA,IAAI,GAAGA,IAAI,CAACH,OAAL,CAAc,IAAItB,MAAJ,CAAY,gBAAgBqC,SAAhB,GAA4B,SAAxC,EAAmD,GAAnD,CAAd,EAAwE,IAAxE,CAAP,CArHwC,CAuHxC;;AACAZ,EAAAA,IAAI,GAAGA,IAAI,CAACH,OAAL,CAAc,IAAItB,MAAJ,CAAY,UAAUqC,SAAV,GAAsB,iBAAlC,EAAqD,GAArD,CAAd,EAA0E,IAA1E,CAAP,CAxHwC,CA0HxC;;AACA,MAAKX,EAAL,EAAU;AACT;AACAD,IAAAA,IAAI,GAAGA,IAAI,CAACH,OAAL,CAAc,4BAAd,EAA4C,UAAEjB,KAAF;AAAA,aAAaA,KAAK,CAAE,CAAF,CAAL,CAAWiB,OAAX,CAAoB,KAApB,EAA2B,uBAA3B,CAAb;AAAA,KAA5C,CAAP,CAFS,CAIT;;AACAG,IAAAA,IAAI,GAAGA,IAAI,CAACH,OAAL,CAAc,cAAd,EAA8B,QAA9B,CAAP,CALS,CAOT;;AACAG,IAAAA,IAAI,GAAGA,IAAI,CAACH,OAAL,CAAc,kBAAd,EAAkC,UAAEqB,CAAF,EAAKC,CAAL;AAAA,aAAYA,CAAC,GAAGD,CAAH,GAAO,UAApB;AAAA,KAAlC,CAAP,CARS,CAUT;;AACAlB,IAAAA,IAAI,GAAGA,IAAI,CAACH,OAAL,CAAc,yBAAd,EAAyC,IAAzC,CAAP;AACA,GAvIuC,CAyIxC;;;AACAG,EAAAA,IAAI,GAAGA,IAAI,CAACH,OAAL,CAAc,IAAItB,MAAJ,CAAY,UAAUqC,SAAV,GAAsB,mBAAlC,EAAuD,GAAvD,CAAd,EAA4E,IAA5E,CAAP,CA1IwC,CA4IxC;;AACAZ,EAAAA,IAAI,GAAGA,IAAI,CAACH,OAAL,CAAc,8DAAd,EAA8E,IAA9E,CAAP;AACAG,EAAAA,IAAI,GAAGA,IAAI,CAACH,OAAL,CAAc,WAAd,EAA2B,MAA3B,CAAP,CA9IwC,CAgJxC;;AACAK,EAAAA,OAAO,CAACc,OAAR,CAAiB,UAAEI,MAAF,EAAc;AAAA,+CACHA,MADG;AAAA,QACtBV,IADsB;AAAA,QAChBW,QADgB;;AAE9BrB,IAAAA,IAAI,GAAGA,IAAI,CAACH,OAAL,CAAca,IAAd,EAAoBW,QAApB,CAAP;AACA,GAHD,EAjJwC,CAsJxC;;AACA,MAAK,CAAC,CAAD,KAAOrB,IAAI,CAACJ,OAAL,CAAc,eAAd,CAAZ,EAA8C;AAC7CI,IAAAA,IAAI,GAAGA,IAAI,CAACH,OAAL,CAAc,sBAAd,EAAsC,IAAtC,CAAP;AACA;;AAED,SAAOG,IAAP;AACA;AAED;;;;;;;;;;;AASO,SAASsB,OAAT,CAAkBC,IAAlB,EAAyB;AAC/B,MAAMC,SAAS,GAAG,sFAAlB;AACA,MAAMC,UAAU,GAAGD,SAAS,GAAG,QAA/B;AACA,MAAME,UAAU,GAAGF,SAAS,GAAG,MAA/B;AACA,MAAMG,QAAQ,GAAG,EAAjB;AACA,MAAIC,kBAAkB,GAAG,KAAzB;AACA,MAAIC,UAAU,GAAG,KAAjB;;AAEA,MAAK,CAAEN,IAAP,EAAc;AACb,WAAO,EAAP;AACA,GAV8B,CAY/B;;;AACA,MAAKA,IAAI,CAAC3B,OAAL,CAAc,SAAd,MAA8B,CAAC,CAA/B,IAAoC2B,IAAI,CAAC3B,OAAL,CAAc,QAAd,MAA6B,CAAC,CAAvE,EAA2E;AAC1E2B,IAAAA,IAAI,GAAGA,IAAI,CAAC1B,OAAL,CAAc,sCAAd,EAAsD,UAAUjB,KAAV,EAAkB;AAC9E+C,MAAAA,QAAQ,CAAC9C,IAAT,CAAeD,KAAf;AACA,aAAO,eAAP;AACA,KAHM,CAAP;AAIA,GAlB8B,CAoB/B;;;AACA,MAAK2C,IAAI,CAAC3B,OAAL,CAAc,MAAd,MAA2B,CAAC,CAAjC,EAAqC;AACpCgC,IAAAA,kBAAkB,GAAG,IAArB;AACAL,IAAAA,IAAI,GAAGA,IAAI,CAAC1B,OAAL,CAAc,4BAAd,EAA4C,UAAUqB,CAAV,EAAc;AAChEA,MAAAA,CAAC,GAAGA,CAAC,CAACrB,OAAF,CAAW,sBAAX,EAAmC,iBAAnC,CAAJ;AACAqB,MAAAA,CAAC,GAAGA,CAAC,CAACrB,OAAF,CAAW,4BAAX,EAAyC,iBAAzC,CAAJ;AACA,aAAOqB,CAAC,CAACrB,OAAF,CAAW,QAAX,EAAqB,iBAArB,CAAP;AACA,KAJM,CAAP;AAKA,GA5B8B,CA8B/B;;;AACA,MAAK0B,IAAI,CAAC3B,OAAL,CAAc,UAAd,MAA+B,CAAC,CAArC,EAAyC;AACxCiC,IAAAA,UAAU,GAAG,IAAb;AACAN,IAAAA,IAAI,GAAGA,IAAI,CAAC1B,OAAL,CAAc,iCAAd,EAAiD,UAAUqB,CAAV,EAAc;AACrE,aAAOA,CAAC,CAACrB,OAAF,CAAW,cAAX,EAA2B,gBAA3B,EAA8CA,OAA9C,CAAuD,WAAvD,EAAoE,EAApE,CAAP;AACA,KAFM,CAAP;AAGA,GApC8B,CAsC/B;;;AACA0B,EAAAA,IAAI,GAAGA,IAAI,CAAC1B,OAAL,CAAc,IAAItB,MAAJ,CAAY,YAAYkD,UAAZ,GAAyB,QAArC,EAA+C,GAA/C,CAAd,EAAoE,SAApE,CAAP;AACAF,EAAAA,IAAI,GAAGA,IAAI,CAAC1B,OAAL,CAAc,IAAItB,MAAJ,CAAY,cAAckD,UAAd,GAA2B,gBAAvC,EAAyD,GAAzD,CAAd,EAA8E,QAA9E,CAAP,CAxC+B,CA0C/B;;AACAF,EAAAA,IAAI,GAAGA,IAAI,CAAC1B,OAAL,CAAc,sBAAd,EAAsC,SAAtC,CAAP,CA3C+B,CA6C/B;;AACA0B,EAAAA,IAAI,GAAGA,IAAI,CAAC1B,OAAL,CAAc,wBAAd,EAAwC,aAAxC,CAAP,CA9C+B,CAgD/B;;AACA0B,EAAAA,IAAI,GAAGA,IAAI,CAAC1B,OAAL,CAAc,UAAd,EAA0B,EAA1B,CAAP;AACA0B,EAAAA,IAAI,GAAGA,IAAI,CAAC1B,OAAL,CAAc,eAAd,EAA+B,MAA/B,CAAP,CAlD+B,CAoD/B;;AACA0B,EAAAA,IAAI,GAAGA,IAAI,CAAC1B,OAAL,CAAc,kBAAd,EAAkC,MAAlC,CAAP,CArD+B,CAuD/B;;AACA0B,EAAAA,IAAI,GAAGA,IAAI,CAAC1B,OAAL,CAAc,qBAAd,EAAqC,UAAUjB,KAAV,EAAiBkD,KAAjB,EAAyB;AACpE,QAAKA,KAAK,IAAIA,KAAK,CAAClC,OAAN,CAAe,IAAf,MAA0B,CAAC,CAAzC,EAA6C;AAC5C,aAAO,MAAP;AACA;;AAED,WAAO,IAAP;AACA,GANM,CAAP,CAxD+B,CAgE/B;;AACA2B,EAAAA,IAAI,GAAGA,IAAI,CAAC1B,OAAL,CAAc,UAAd,EAA0B,QAA1B,CAAP;AACA0B,EAAAA,IAAI,GAAGA,IAAI,CAAC1B,OAAL,CAAc,aAAd,EAA6B,UAA7B,CAAP,CAlE+B,CAoE/B;;AACA0B,EAAAA,IAAI,GAAGA,IAAI,CAAC1B,OAAL,CAAc,wCAAd,EAAwD,8BAAxD,CAAP;AACA0B,EAAAA,IAAI,GAAGA,IAAI,CAAC1B,OAAL,CAAc,0BAAd,EAA0C,sBAA1C,CAAP,CAtE+B,CAwE/B;;AACA0B,EAAAA,IAAI,GAAGA,IAAI,CAAC1B,OAAL,CAAc,IAAItB,MAAJ,CAAY,cAAcmD,UAAd,GAA2B,oBAAvC,EAA6D,GAA7D,CAAd,EAAkF,QAAlF,CAAP;AACAH,EAAAA,IAAI,GAAGA,IAAI,CAAC1B,OAAL,CAAc,IAAItB,MAAJ,CAAY,YAAYmD,UAAZ,GAAyB,QAArC,EAA+C,GAA/C,CAAd,EAAoE,SAApE,CAAP,CA1E+B,CA4E/B;;AACAH,EAAAA,IAAI,GAAGA,IAAI,CAAC1B,OAAL,CAAc,sBAAd,EAAsC,SAAtC,CAAP,CA7E+B,CA+E/B;;AACA,MAAK0B,IAAI,CAAC3B,OAAL,CAAc,SAAd,MAA8B,CAAC,CAApC,EAAwC;AACvC2B,IAAAA,IAAI,GAAGA,IAAI,CAAC1B,OAAL,CAAc,aAAd,EAA6B,WAA7B,CAAP;AACA0B,IAAAA,IAAI,GAAGA,IAAI,CAAC1B,OAAL,CAAc,gBAAd,EAAgC,aAAhC,CAAP;AACA,GAnF8B,CAqF/B;;;AACA,MAAK0B,IAAI,CAAC3B,OAAL,CAAc,KAAd,MAA0B,CAAC,CAAhC,EAAoC;AACnC2B,IAAAA,IAAI,GAAGA,IAAI,CAAC1B,OAAL,CAAc,sBAAd,EAAsC,gBAAtC,CAAP;AACA,GAxF8B,CA0F/B;;;AACA,MAAK0B,IAAI,CAAC3B,OAAL,CAAc,SAAd,MAA8B,CAAC,CAApC,EAAwC;AACvC2B,IAAAA,IAAI,GAAGA,IAAI,CAAC1B,OAAL,CAAc,4BAAd,EAA4C,UAAUqB,CAAV,EAAc;AAChE,aAAOA,CAAC,CAACrB,OAAF,CAAW,UAAX,EAAuB,EAAvB,CAAP;AACA,KAFM,CAAP;AAGA,GA/F8B,CAiG/B;;;AACA0B,EAAAA,IAAI,GAAGA,IAAI,CAAC1B,OAAL,CAAc,SAAd,EAAyB,QAAzB,CAAP,CAlG+B,CAoG/B;;AACA0B,EAAAA,IAAI,GAAGA,IAAI,CAAC1B,OAAL,CAAc,8BAAd,EAA8C,MAA9C,CAAP,CArG+B,CAuG/B;;AACA0B,EAAAA,IAAI,GAAGA,IAAI,CAAC1B,OAAL,CAAc,MAAd,EAAsB,EAAtB,CAAP;AACA0B,EAAAA,IAAI,GAAGA,IAAI,CAAC1B,OAAL,CAAc,cAAd,EAA8B,EAA9B,CAAP;;AAEA,MAAK+B,kBAAL,EAA0B;AACzBL,IAAAA,IAAI,GAAGA,IAAI,CAAC1B,OAAL,CAAc,kBAAd,EAAkC,IAAlC,CAAP;AACA;;AAED,MAAKgC,UAAL,EAAkB;AACjBN,IAAAA,IAAI,GAAGA,IAAI,CAAC1B,OAAL,CAAc,sBAAd,EAAsC,QAAtC,CAAP;AACA,GAjH8B,CAmH/B;;;AACA,MAAK8B,QAAQ,CAAC3C,MAAd,EAAuB;AACtBuC,IAAAA,IAAI,GAAGA,IAAI,CAAC1B,OAAL,CAAc,gBAAd,EAAgC,YAAW;AACjD,aAAO8B,QAAQ,CAACI,KAAT,EAAP;AACA,KAFM,CAAP;AAGA;;AAED,SAAOR,IAAP;AACA","sourcesContent":["/**\n * The regular expression for an HTML element.\n *\n * @type {String}\n */\nconst htmlSplitRegex = ( () => {\n\t/* eslint-disable no-multi-spaces */\n\tconst comments =\n\t\t'!' +           // Start of comment, after the <.\n\t\t'(?:' +         // Unroll the loop: Consume everything until --> is found.\n\t\t\t'-(?!->)' + // Dash not followed by end of comment.\n\t\t\t'[^\\\\-]*' + // Consume non-dashes.\n\t\t')*' +          // Loop possessively.\n\t\t'(?:-->)?';     // End of comment. If not found, match all input.\n\n\tconst cdata =\n\t\t'!\\\\[CDATA\\\\[' + // Start of comment, after the <.\n\t\t'[^\\\\]]*' +      // Consume non-].\n\t\t'(?:' +          // Unroll the loop: Consume everything until ]]> is found.\n\t\t\t'](?!]>)' +  // One ] not followed by end of comment.\n\t\t\t'[^\\\\]]*' +  // Consume non-].\n\t\t')*?' +          // Loop possessively.\n\t\t'(?:]]>)?';      // End of comment. If not found, match all input.\n\n\tconst escaped =\n\t\t'(?=' +              // Is the element escaped?\n\t\t\t'!--' +\n\t\t'|' +\n\t\t\t'!\\\\[CDATA\\\\[' +\n\t\t')' +\n\t\t'((?=!-)' +          // If yes, which type?\n\t\t\tcomments +\n\t\t'|' +\n\t\t\tcdata +\n\t\t')';\n\n\tconst regex =\n\t\t'(' +               // Capture the entire match.\n\t\t\t'<' +           // Find start of element.\n\t\t\t'(' +           // Conditional expression follows.\n\t\t\t\tescaped +   // Find end of escaped element.\n\t\t\t'|' +           // ... else ...\n\t\t\t\t'[^>]*>?' + // Find end of normal element.\n\t\t\t')' +\n\t\t')';\n\n\treturn new RegExp( regex );\n\t/* eslint-enable no-multi-spaces */\n} )();\n\n/**\n * Separate HTML elements and comments from the text.\n *\n * @param  {string} input The text which has to be formatted.\n * @return {Array}        The formatted text.\n */\nfunction htmlSplit( input ) {\n\tconst parts = [];\n\tlet workingInput = input;\n\n\tlet match;\n\twhile ( ( match = workingInput.match( htmlSplitRegex ) ) ) {\n\t\tparts.push( workingInput.slice( 0, match.index ) );\n\t\tparts.push( match[ 0 ] );\n\t\tworkingInput = workingInput.slice( match.index + match[ 0 ].length );\n\t}\n\n\tif ( workingInput.length ) {\n\t\tparts.push( workingInput );\n\t}\n\n\treturn parts;\n}\n\n/**\n * Replace characters or phrases within HTML elements only.\n *\n * @param  {string} haystack     The text which has to be formatted.\n * @param  {Object} replacePairs In the form {from: 'to', ...}.\n * @return {string}              The formatted text.\n */\nfunction replaceInHtmlTags( haystack, replacePairs ) {\n\t// Find all elements.\n\tconst textArr = htmlSplit( haystack );\n\tlet changed = false;\n\n\t// Extract all needles.\n\tconst needles = Object.keys( replacePairs );\n\n\t// Loop through delimiters (elements) only.\n\tfor ( let i = 1; i < textArr.length; i += 2 ) {\n\t\tfor ( let j = 0; j < needles.length; j++ ) {\n\t\t\tconst needle = needles[ j ];\n\t\t\tif ( -1 !== textArr[ i ].indexOf( needle ) ) {\n\t\t\t\ttextArr[ i ] = textArr[ i ].replace( new RegExp( needle, 'g' ), replacePairs[ needle ] );\n\t\t\t\tchanged = true;\n\t\t\t\t// After one strtr() break out of the foreach loop and look at next element.\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( changed ) {\n\t\thaystack = textArr.join( '' );\n\t}\n\n\treturn haystack;\n}\n\n/**\n * Replaces double line-breaks with paragraph elements.\n *\n * A group of regex replaces used to identify text formatted with newlines and\n * replace double line-breaks with HTML paragraph tags. The remaining line-\n * breaks after conversion become <<br />> tags, unless br is set to 'false'.\n *\n * @param  {string}    text The text which has to be formatted.\n * @param  {boolean}   br   Optional. If set, will convert all remaining line-\n *                          breaks after paragraphing. Default true.\n * @return {string}         Text which has been converted into paragraph tags.\n */\nexport function autop( text, br = true ) {\n\tconst preTags = [];\n\n\tif ( text.trim() === '' ) {\n\t\treturn '';\n\t}\n\n\t// Just to make things a little easier, pad the end.\n\ttext = text + '\\n';\n\n\t/*\n\t * Pre tags shouldn't be touched by autop.\n\t * Replace pre tags with placeholders and bring them back after autop.\n\t */\n\tif ( text.indexOf( '<pre' ) !== -1 ) {\n\t\tconst textParts = text.split( '</pre>' );\n\t\tconst lastText = textParts.pop();\n\t\ttext = '';\n\n\t\tfor ( let i = 0; i < textParts.length; i++ ) {\n\t\t\tconst textPart = textParts[ i ];\n\t\t\tconst start = textPart.indexOf( '<pre' );\n\n\t\t\t// Malformed html?\n\t\t\tif ( start === -1 ) {\n\t\t\t\ttext += textPart;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst name = '<pre wp-pre-tag-' + i + '></pre>';\n\t\t\tpreTags.push( [ name, textPart.substr( start ) + '</pre>' ] );\n\n\t\t\ttext += textPart.substr( 0, start ) + name;\n\t\t}\n\n\t\ttext += lastText;\n\t}\n\t// Change multiple <br>s into two line breaks, which will turn into paragraphs.\n\ttext = text.replace( /<br\\s*\\/?>\\s*<br\\s*\\/?>/g, '\\n\\n' );\n\n\tconst allBlocks = '(?:table|thead|tfoot|caption|col|colgroup|tbody|tr|td|th|div|dl|dd|dt|ul|ol|li|pre|form|map|area|blockquote|address|math|style|p|h[1-6]|hr|fieldset|legend|section|article|aside|hgroup|header|footer|nav|figure|figcaption|details|menu|summary)';\n\n\t// Add a double line break above block-level opening tags.\n\ttext = text.replace( new RegExp( '(<' + allBlocks + '[\\s\\/>])', 'g' ), '\\n\\n$1' );\n\n\t// Add a double line break below block-level closing tags.\n\ttext = text.replace( new RegExp( '(<\\/' + allBlocks + '>)', 'g' ), '$1\\n\\n' );\n\n\t// Standardize newline characters to \"\\n\".\n\ttext = text.replace( /\\r\\n|\\r/g, '\\n' );\n\n\t// Find newlines in all elements and add placeholders.\n\ttext = replaceInHtmlTags( text, { '\\n': ' <!-- wpnl --> ' } );\n\n\t// Collapse line breaks before and after <option> elements so they don't get autop'd.\n\tif ( text.indexOf( '<option' ) !== -1 ) {\n\t\ttext = text.replace( /\\s*<option/g, '<option' );\n\t\ttext = text.replace( /<\\/option>\\s*/g, '</option>' );\n\t}\n\n\t/*\n\t * Collapse line breaks inside <object> elements, before <param> and <embed> elements\n\t * so they don't get autop'd.\n\t */\n\tif ( text.indexOf( '</object>' ) !== -1 ) {\n\t\ttext = text.replace( /(<object[^>]*>)\\s*/g, '$1' );\n\t\ttext = text.replace( /\\s*<\\/object>/g, '</object>' );\n\t\ttext = text.replace( /\\s*(<\\/?(?:param|embed)[^>]*>)\\s*/g, '$1' );\n\t}\n\n\t/*\n\t * Collapse line breaks inside <audio> and <video> elements,\n\t * before and after <source> and <track> elements.\n\t */\n\tif ( text.indexOf( '<source' ) !== -1 || text.indexOf( '<track' ) !== -1 ) {\n\t\ttext = text.replace( /([<\\[](?:audio|video)[^>\\]]*[>\\]])\\s*/g, '$1' );\n\t\ttext = text.replace( /\\s*([<\\[]\\/(?:audio|video)[>\\]])/g, '$1' );\n\t\ttext = text.replace( /\\s*(<(?:source|track)[^>]*>)\\s*/g, '$1' );\n\t}\n\n\t// Collapse line breaks before and after <figcaption> elements.\n\tif ( text.indexOf( '<figcaption' ) !== -1 ) {\n\t\ttext = text.replace( /\\s*(<figcaption[^>]*>)/, '$1' );\n\t\ttext = text.replace( /<\\/figcaption>\\s*/, '</figcaption>' );\n\t}\n\n\t// Remove more than two contiguous line breaks.\n\ttext = text.replace( /\\n\\n+/g, '\\n\\n' );\n\n\t// Split up the contents into an array of strings, separated by double line breaks.\n\tconst texts = text.split( /\\n\\s*\\n/ ).filter( Boolean );\n\n\t// Reset text prior to rebuilding.\n\ttext = '';\n\n\t// Rebuild the content as a string, wrapping every bit with a <p>.\n\ttexts.forEach( ( textPiece ) => {\n\t\ttext += '<p>' + textPiece.replace( /^\\n*|\\n*$/g, '' ) + '</p>\\n';\n\t} );\n\n\t// Under certain strange conditions it could create a P of entirely whitespace.\n\ttext = text.replace( /<p>\\s*<\\/p>/g, '' );\n\n\t// Add a closing <p> inside <div>, <address>, or <form> tag if missing.\n\ttext = text.replace( /<p>([^<]+)<\\/(div|address|form)>/g, '<p>$1</p></$2>' );\n\n\t// If an opening or closing block element tag is wrapped in a <p>, unwrap it.\n\ttext = text.replace( new RegExp( '<p>\\s*(<\\/?' + allBlocks + '[^>]*>)\\s*<\\/p>', 'g' ), '$1' );\n\n\t// In some cases <li> may get wrapped in <p>, fix them.\n\ttext = text.replace( /<p>(<li.+?)<\\/p>/g, '$1' );\n\n\t// If a <blockquote> is wrapped with a <p>, move it inside the <blockquote>.\n\ttext = text.replace( /<p><blockquote([^>]*)>/gi, '<blockquote$1><p>' );\n\ttext = text.replace( /<\\/blockquote><\\/p>/g, '</p></blockquote>' );\n\n\t// If an opening or closing block element tag is preceded by an opening <p> tag, remove it.\n\ttext = text.replace( new RegExp( '<p>\\s*(<\\/?' + allBlocks + '[^>]*>)', 'g' ), '$1' );\n\n\t// If an opening or closing block element tag is followed by a closing <p> tag, remove it.\n\ttext = text.replace( new RegExp( '(<\\/?' + allBlocks + '[^>]*>)\\s*<\\/p>', 'g' ), '$1' );\n\n\t// Optionally insert line breaks.\n\tif ( br ) {\n\t\t// Replace newlines that shouldn't be touched with a placeholder.\n\t\ttext = text.replace( /<(script|style).*?<\\/\\\\1>/g, ( match ) => match[ 0 ].replace( /\\n/g, '<WPPreserveNewline />' ) );\n\n\t\t// Normalize <br>\n\t\ttext = text.replace( /<br>|<br\\/>/g, '<br />' );\n\n\t\t// Replace any new line characters that aren't preceded by a <br /> with a <br />.\n\t\ttext = text.replace( /(<br \\/>)?\\s*\\n/g, ( a, b ) => b ? a : '<br />\\n' );\n\n\t\t// Replace newline placeholders with newlines.\n\t\ttext = text.replace( /<WPPreserveNewline \\/>/g, '\\n' );\n\t}\n\n\t// If a <br /> tag is after an opening or closing block tag, remove it.\n\ttext = text.replace( new RegExp( '(<\\/?' + allBlocks + '[^>]*>)\\s*<br \\/>', 'g' ), '$1' );\n\n\t// If a <br /> tag is before a subset of opening or closing block tags, remove it.\n\ttext = text.replace( /<br \\/>(\\s*<\\/?(?:p|li|div|dl|dd|dt|th|pre|td|ul|ol)[^>]*>)/g, '$1' );\n\ttext = text.replace( /\\n<\\/p>$/g, '</p>' );\n\n\t// Replace placeholder <pre> tags with their original content.\n\tpreTags.forEach( ( preTag ) => {\n\t\tconst [ name, original ] = preTag;\n\t\ttext = text.replace( name, original );\n\t} );\n\n\t// Restore newlines in all elements.\n\tif ( -1 !== text.indexOf( '<!-- wpnl -->' ) ) {\n\t\ttext = text.replace( /\\s?<!-- wpnl -->\\s?/g, '\\n' );\n\t}\n\n\treturn text;\n}\n\n/**\n * Replaces <p> tags with two line breaks. \"Opposite\" of autop().\n *\n * Replaces <p> tags with two line breaks except where the <p> has attributes.\n * Unifies whitespace. Indents <li>, <dt> and <dd> for better readability.\n *\n * @param  {string} html The content from the editor.\n * @return {string}      The content with stripped paragraph tags.\n */\nexport function removep( html ) {\n\tconst blocklist = 'blockquote|ul|ol|li|dl|dt|dd|table|thead|tbody|tfoot|tr|th|td|h[1-6]|fieldset|figure';\n\tconst blocklist1 = blocklist + '|div|p';\n\tconst blocklist2 = blocklist + '|pre';\n\tconst preserve = [];\n\tlet preserveLinebreaks = false;\n\tlet preserveBr = false;\n\n\tif ( ! html ) {\n\t\treturn '';\n\t}\n\n\t// Protect script and style tags.\n\tif ( html.indexOf( '<script' ) !== -1 || html.indexOf( '<style' ) !== -1 ) {\n\t\thtml = html.replace( /<(script|style)[^>]*>[\\s\\S]*?<\\/\\1>/g, function( match ) {\n\t\t\tpreserve.push( match );\n\t\t\treturn '<wp-preserve>';\n\t\t} );\n\t}\n\n\t// Protect pre tags.\n\tif ( html.indexOf( '<pre' ) !== -1 ) {\n\t\tpreserveLinebreaks = true;\n\t\thtml = html.replace( /<pre[^>]*>[\\s\\S]+?<\\/pre>/g, function( a ) {\n\t\t\ta = a.replace( /<br ?\\/?>(\\r\\n|\\n)?/g, '<wp-line-break>' );\n\t\t\ta = a.replace( /<\\/?p( [^>]*)?>(\\r\\n|\\n)?/g, '<wp-line-break>' );\n\t\t\treturn a.replace( /\\r?\\n/g, '<wp-line-break>' );\n\t\t} );\n\t}\n\n\t// Remove line breaks but keep <br> tags inside image captions.\n\tif ( html.indexOf( '[caption' ) !== -1 ) {\n\t\tpreserveBr = true;\n\t\thtml = html.replace( /\\[caption[\\s\\S]+?\\[\\/caption\\]/g, function( a ) {\n\t\t\treturn a.replace( /<br([^>]*)>/g, '<wp-temp-br$1>' ).replace( /[\\r\\n\\t]+/, '' );\n\t\t} );\n\t}\n\n\t// Normalize white space characters before and after block tags.\n\thtml = html.replace( new RegExp( '\\\\s*</(' + blocklist1 + ')>\\\\s*', 'g' ), '</$1>\\n' );\n\thtml = html.replace( new RegExp( '\\\\s*<((?:' + blocklist1 + ')(?: [^>]*)?)>', 'g' ), '\\n<$1>' );\n\n\t// Mark </p> if it has any attributes.\n\thtml = html.replace( /(<p [^>]+>.*?)<\\/p>/g, '$1</p#>' );\n\n\t// Preserve the first <p> inside a <div>.\n\thtml = html.replace( /<div( [^>]*)?>\\s*<p>/gi, '<div$1>\\n\\n' );\n\n\t// Remove paragraph tags.\n\thtml = html.replace( /\\s*<p>/gi, '' );\n\thtml = html.replace( /\\s*<\\/p>\\s*/gi, '\\n\\n' );\n\n\t// Normalize white space chars and remove multiple line breaks.\n\thtml = html.replace( /\\n[\\s\\u00a0]+\\n/g, '\\n\\n' );\n\n\t// Replace <br> tags with line breaks.\n\thtml = html.replace( /(\\s*)<br ?\\/?>\\s*/gi, function( match, space ) {\n\t\tif ( space && space.indexOf( '\\n' ) !== -1 ) {\n\t\t\treturn '\\n\\n';\n\t\t}\n\n\t\treturn '\\n';\n\t} );\n\n\t// Fix line breaks around <div>.\n\thtml = html.replace( /\\s*<div/g, '\\n<div' );\n\thtml = html.replace( /<\\/div>\\s*/g, '</div>\\n' );\n\n\t// Fix line breaks around caption shortcodes.\n\thtml = html.replace( /\\s*\\[caption([^\\[]+)\\[\\/caption\\]\\s*/gi, '\\n\\n[caption$1[/caption]\\n\\n' );\n\thtml = html.replace( /caption\\]\\n\\n+\\[caption/g, 'caption]\\n\\n[caption' );\n\n\t// Pad block elements tags with a line break.\n\thtml = html.replace( new RegExp( '\\\\s*<((?:' + blocklist2 + ')(?: [^>]*)?)\\\\s*>', 'g' ), '\\n<$1>' );\n\thtml = html.replace( new RegExp( '\\\\s*</(' + blocklist2 + ')>\\\\s*', 'g' ), '</$1>\\n' );\n\n\t// Indent <li>, <dt> and <dd> tags.\n\thtml = html.replace( /<((li|dt|dd)[^>]*)>/g, ' \\t<$1>' );\n\n\t// Fix line breaks around <select> and <option>.\n\tif ( html.indexOf( '<option' ) !== -1 ) {\n\t\thtml = html.replace( /\\s*<option/g, '\\n<option' );\n\t\thtml = html.replace( /\\s*<\\/select>/g, '\\n</select>' );\n\t}\n\n\t// Pad <hr> with two line breaks.\n\tif ( html.indexOf( '<hr' ) !== -1 ) {\n\t\thtml = html.replace( /\\s*<hr( [^>]*)?>\\s*/g, '\\n\\n<hr$1>\\n\\n' );\n\t}\n\n\t// Remove line breaks in <object> tags.\n\tif ( html.indexOf( '<object' ) !== -1 ) {\n\t\thtml = html.replace( /<object[\\s\\S]+?<\\/object>/g, function( a ) {\n\t\t\treturn a.replace( /[\\r\\n]+/g, '' );\n\t\t} );\n\t}\n\n\t// Unmark special paragraph closing tags.\n\thtml = html.replace( /<\\/p#>/g, '</p>\\n' );\n\n\t// Pad remaining <p> tags whit a line break.\n\thtml = html.replace( /\\s*(<p [^>]+>[\\s\\S]*?<\\/p>)/g, '\\n$1' );\n\n\t// Trim.\n\thtml = html.replace( /^\\s+/, '' );\n\thtml = html.replace( /[\\s\\u00a0]+$/, '' );\n\n\tif ( preserveLinebreaks ) {\n\t\thtml = html.replace( /<wp-line-break>/g, '\\n' );\n\t}\n\n\tif ( preserveBr ) {\n\t\thtml = html.replace( /<wp-temp-br([^>]*)>/g, '<br$1>' );\n\t}\n\n\t// Restore preserved tags.\n\tif ( preserve.length ) {\n\t\thtml = html.replace( /<wp-preserve>/g, function() {\n\t\t\treturn preserve.shift();\n\t\t} );\n\t}\n\n\treturn html;\n}\n"]}