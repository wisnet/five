{"version":3,"sources":["/Users/riad/Workspace/a8c/gutenberg/packages/hooks/src/createAddHook.js"],"names":["createAddHook","hooks","addHook","hookName","namespace","callback","priority","console","error","handler","handlers","i","length","splice","__current","forEach","hookInfo","name","currentIndex","runs"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;;;;;;AAOA,SAASA,aAAT,CAAwBC,KAAxB,EAAgC;AAC/B;;;;;;;;AAQA,SAAO,SAASC,OAAT,CAAkBC,QAAlB,EAA4BC,SAA5B,EAAuCC,QAAvC,EAAiE;AAAA,QAAhBC,QAAgB,uEAAL,EAAK;;AACvE,QAAK,CAAE,+BAAkBH,QAAlB,CAAP,EAAsC;AACrC;AACA;;AAED,QAAK,CAAE,gCAAmBC,SAAnB,CAAP,EAAwC;AACvC;AACA;;AAED,QAAK,eAAe,OAAOC,QAA3B,EAAsC;AACrC;AACAE,MAAAA,OAAO,CAACC,KAAR,CAAe,uCAAf;AACA;AACA,KAbsE,CAevE;;;AACA,QAAK,aAAa,OAAOF,QAAzB,EAAoC;AACnC;AACAC,MAAAA,OAAO,CAACC,KAAR,CAAe,mDAAf;AACA;AACA;;AAED,QAAMC,OAAO,GAAG;AAAEJ,MAAAA,QAAQ,EAARA,QAAF;AAAYC,MAAAA,QAAQ,EAARA,QAAZ;AAAsBF,MAAAA,SAAS,EAATA;AAAtB,KAAhB;;AAEA,QAAKH,KAAK,CAAEE,QAAF,CAAV,EAAyB;AACxB;AACA,UAAMO,QAAQ,GAAGT,KAAK,CAAEE,QAAF,CAAL,CAAkBO,QAAnC;AAEA,UAAIC,CAAJ;;AACA,WAAMA,CAAC,GAAGD,QAAQ,CAACE,MAAnB,EAA2BD,CAAC,GAAG,CAA/B,EAAkCA,CAAC,EAAnC,EAAwC;AACvC,YAAKL,QAAQ,IAAII,QAAQ,CAAEC,CAAC,GAAG,CAAN,CAAR,CAAkBL,QAAnC,EAA8C;AAC7C;AACA;AACD;;AAED,UAAKK,CAAC,KAAKD,QAAQ,CAACE,MAApB,EAA6B;AAC5B;AACAF,QAAAA,QAAQ,CAAEC,CAAF,CAAR,GAAgBF,OAAhB;AACA,OAHD,MAGO;AACN;AACAC,QAAAA,QAAQ,CAACG,MAAT,CAAiBF,CAAjB,EAAoB,CAApB,EAAuBF,OAAvB;AACA,OAjBuB,CAmBxB;AACA;AACA;AACA;;;AACA,OAAER,KAAK,CAACa,SAAN,IAAmB,EAArB,EAA0BC,OAA1B,CAAmC,UAAEC,QAAF,EAAgB;AAClD,YAAKA,QAAQ,CAACC,IAAT,KAAkBd,QAAlB,IAA8Ba,QAAQ,CAACE,YAAT,IAAyBP,CAA5D,EAAgE;AAC/DK,UAAAA,QAAQ,CAACE,YAAT;AACA;AACD,OAJD;AAKA,KA5BD,MA4BO;AACN;AACAjB,MAAAA,KAAK,CAAEE,QAAF,CAAL,GAAoB;AACnBO,QAAAA,QAAQ,EAAE,CAAED,OAAF,CADS;AAEnBU,QAAAA,IAAI,EAAE;AAFa,OAApB;AAIA;;AAED,QAAKhB,QAAQ,KAAK,WAAlB,EAAgC;AAC/B,sBAAU,WAAV,EAAuBA,QAAvB,EAAiCC,SAAjC,EAA4CC,QAA5C,EAAsDC,QAAtD;AACA;AACD,GA/DD;AAgEA;;eAEcN,a","sourcesContent":["import validateNamespace from './validateNamespace.js';\nimport validateHookName from './validateHookName.js';\nimport { doAction } from './';\n\n/**\n * Returns a function which, when invoked, will add a hook.\n *\n * @param  {Object}   hooks Stored hooks, keyed by hook name.\n *\n * @return {Function}       Function that adds a new hook.\n */\nfunction createAddHook( hooks ) {\n\t/**\n\t * Adds the hook to the appropriate hooks container.\n\t *\n\t * @param {string}   hookName  Name of hook to add\n\t * @param {string}   namespace The unique namespace identifying the callback in the form `vendor/plugin/function`.\n\t * @param {Function} callback  Function to call when the hook is run\n\t * @param {?number}  priority  Priority of this hook (default=10)\n\t */\n\treturn function addHook( hookName, namespace, callback, priority = 10 ) {\n\t\tif ( ! validateHookName( hookName ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( ! validateNamespace( namespace ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( 'function' !== typeof callback ) {\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.error( 'The hook callback must be a function.' );\n\t\t\treturn;\n\t\t}\n\n\t\t// Validate numeric priority\n\t\tif ( 'number' !== typeof priority ) {\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.error( 'If specified, the hook priority must be a number.' );\n\t\t\treturn;\n\t\t}\n\n\t\tconst handler = { callback, priority, namespace };\n\n\t\tif ( hooks[ hookName ] ) {\n\t\t\t// Find the correct insert index of the new hook.\n\t\t\tconst handlers = hooks[ hookName ].handlers;\n\n\t\t\tlet i;\n\t\t\tfor ( i = handlers.length; i > 0; i-- ) {\n\t\t\t\tif ( priority >= handlers[ i - 1 ].priority ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( i === handlers.length ) {\n\t\t\t\t// If append, operate via direct assignment.\n\t\t\t\thandlers[ i ] = handler;\n\t\t\t} else {\n\t\t\t\t// Otherwise, insert before index via splice.\n\t\t\t\thandlers.splice( i, 0, handler );\n\t\t\t}\n\n\t\t\t// We may also be currently executing this hook.  If the callback\n\t\t\t// we're adding would come after the current callback, there's no\n\t\t\t// problem; otherwise we need to increase the execution index of\n\t\t\t// any other runs by 1 to account for the added element.\n\t\t\t( hooks.__current || [] ).forEach( ( hookInfo ) => {\n\t\t\t\tif ( hookInfo.name === hookName && hookInfo.currentIndex >= i ) {\n\t\t\t\t\thookInfo.currentIndex++;\n\t\t\t\t}\n\t\t\t} );\n\t\t} else {\n\t\t\t// This is the first hook of its type.\n\t\t\thooks[ hookName ] = {\n\t\t\t\thandlers: [ handler ],\n\t\t\t\truns: 0,\n\t\t\t};\n\t\t}\n\n\t\tif ( hookName !== 'hookAdded' ) {\n\t\t\tdoAction( 'hookAdded', hookName, namespace, callback, priority );\n\t\t}\n\t};\n}\n\nexport default createAddHook;\n"]}