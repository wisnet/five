{"version":3,"sources":["/Users/riad/Workspace/a8c/gutenberg/packages/data/src/components/with-select/index.js"],"names":["Component","isShallowEqual","createHigherOrderComponent","RegistryConsumer","withSelect","mapSelectToProps","WrappedComponent","DEFAULT_MERGE_PROPS","getNextMergeProps","props","registry","select","ownProps","ComponentWithSelect","onStoreChange","bind","subscribe","mergeProps","canRunSelection","hasQueuedSelection","unsubscribe","nextProps","nextState","hasRegistryChanged","hasPropsChanged","state","nextMergeProps","setState"],"mappings":"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","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { Component } from '@wordpress/element';\nimport isShallowEqual from '@wordpress/is-shallow-equal';\nimport { createHigherOrderComponent } from '@wordpress/compose';\n\n/**\n * Internal dependencies\n */\nimport { RegistryConsumer } from '../registry-provider';\n\n/**\n * Higher-order component used to inject state-derived props using registered\n * selectors.\n *\n * @param {Function} mapSelectToProps Function called on every state change,\n *                                   expected to return object of props to\n *                                   merge with the component's own props.\n *\n * @return {Component} Enhanced component with merged state data props.\n */\nconst withSelect = ( mapSelectToProps ) => createHigherOrderComponent( ( WrappedComponent ) => {\n\t/**\n\t * Default merge props. A constant value is used as the fallback since it\n\t * can be more efficiently shallow compared in case component is repeatedly\n \t * rendered without its own merge props.\n\t *\n\t * @type {Object}\n\t */\n\tconst DEFAULT_MERGE_PROPS = {};\n\n\t/**\n\t * Given a props object, returns the next merge props by mapSelectToProps.\n\t *\n\t * @param {Object} props Props to pass as argument to mapSelectToProps.\n\t *\n\t * @return {Object} Props to merge into rendered wrapped element.\n\t */\n\tfunction getNextMergeProps( props ) {\n\t\treturn (\n\t\t\tmapSelectToProps( props.registry.select, props.ownProps, props.registry ) ||\n\t\t\tDEFAULT_MERGE_PROPS\n\t\t);\n\t}\n\n\tclass ComponentWithSelect extends Component {\n\t\tconstructor( props ) {\n\t\t\tsuper( props );\n\n\t\t\tthis.onStoreChange = this.onStoreChange.bind( this );\n\n\t\t\tthis.subscribe( props.registry );\n\n\t\t\tthis.mergeProps = getNextMergeProps( props );\n\t\t}\n\n\t\tcomponentDidMount() {\n\t\t\tthis.canRunSelection = true;\n\n\t\t\t// A state change may have occurred between the constructor and\n\t\t\t// mount of the component (e.g. during the wrapped component's own\n\t\t\t// constructor), in which case selection should be rerun.\n\t\t\tif ( this.hasQueuedSelection ) {\n\t\t\t\tthis.hasQueuedSelection = false;\n\t\t\t\tthis.onStoreChange();\n\t\t\t}\n\t\t}\n\n\t\tcomponentWillUnmount() {\n\t\t\tthis.canRunSelection = false;\n\t\t\tthis.unsubscribe();\n\t\t}\n\n\t\tshouldComponentUpdate( nextProps, nextState ) {\n\t\t\t// Cycle subscription if registry changes.\n\t\t\tconst hasRegistryChanged = nextProps.registry !== this.props.registry;\n\t\t\tif ( hasRegistryChanged ) {\n\t\t\t\tthis.unsubscribe();\n\t\t\t\tthis.subscribe( nextProps.registry );\n\t\t\t}\n\n\t\t\t// Treat a registry change as equivalent to `ownProps`, to reflect\n\t\t\t// `mergeProps` to rendered component if and only if updated.\n\t\t\tconst hasPropsChanged = (\n\t\t\t\thasRegistryChanged ||\n\t\t\t\t! isShallowEqual( this.props.ownProps, nextProps.ownProps )\n\t\t\t);\n\n\t\t\t// Only render if props have changed or merge props have been updated\n\t\t\t// from the store subscriber.\n\t\t\tif ( this.state === nextState && ! hasPropsChanged ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif ( hasPropsChanged ) {\n\t\t\t\tconst nextMergeProps = getNextMergeProps( nextProps );\n\t\t\t\tif ( ! isShallowEqual( this.mergeProps, nextMergeProps ) ) {\n\t\t\t\t\t// If merge props change as a result of the incoming props,\n\t\t\t\t\t// they should be reflected as such in the upcoming render.\n\t\t\t\t\t// While side effects are discouraged in lifecycle methods,\n\t\t\t\t\t// this component is used heavily, and prior efforts to use\n\t\t\t\t\t// `getDerivedStateFromProps` had demonstrated miserable\n\t\t\t\t\t// performance.\n\t\t\t\t\tthis.mergeProps = nextMergeProps;\n\t\t\t\t}\n\n\t\t\t\t// Regardless whether merge props are changing, fall through to\n\t\t\t\t// incur the render since the component will need to receive\n\t\t\t\t// the changed `ownProps`.\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tonStoreChange() {\n\t\t\tif ( ! this.canRunSelection ) {\n\t\t\t\tthis.hasQueuedSelection = true;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst nextMergeProps = getNextMergeProps( this.props );\n\t\t\tif ( isShallowEqual( this.mergeProps, nextMergeProps ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.mergeProps = nextMergeProps;\n\n\t\t\t// Schedule an update. Merge props are not assigned to state since\n\t\t\t// derivation of merge props from incoming props occurs within\n\t\t\t// shouldComponentUpdate, where setState is not allowed. setState\n\t\t\t// is used here instead of forceUpdate because forceUpdate bypasses\n\t\t\t// shouldComponentUpdate altogether, which isn't desireable if both\n\t\t\t// state and props change within the same render. Unfortunately,\n\t\t\t// this requires that next merge props are generated twice.\n\t\t\tthis.setState( {} );\n\t\t}\n\n\t\tsubscribe( registry ) {\n\t\t\tthis.unsubscribe = registry.subscribe( this.onStoreChange );\n\t\t}\n\n\t\trender() {\n\t\t\treturn <WrappedComponent { ...this.props.ownProps } { ...this.mergeProps } />;\n\t\t}\n\t}\n\n\treturn ( ownProps ) => (\n\t\t<RegistryConsumer>\n\t\t\t{ ( registry ) => (\n\t\t\t\t<ComponentWithSelect\n\t\t\t\t\townProps={ ownProps }\n\t\t\t\t\tregistry={ registry }\n\t\t\t\t/>\n\t\t\t) }\n\t\t</RegistryConsumer>\n\t);\n}, 'withSelect' );\n\nexport default withSelect;\n"]}