{"version":3,"sources":["/Users/riad/Workspace/a8c/gutenberg/packages/dom/src/tabbable.js"],"names":["getTabIndex","element","tabIndex","getAttribute","parseInt","isTabbableIndex","mapElementToObjectTabbable","index","mapObjectTabbableToElement","object","compareObjectTabbables","a","b","aTabIndex","bTabIndex","find","context","filter","map","sort"],"mappings":";;;;;;;;AAGA;;AAHA;;;;AAKA;;;;;;;;;;;;AAYA,SAASA,WAAT,CAAsBC,OAAtB,EAAgC;AAC/B,MAAMC,QAAQ,GAAGD,OAAO,CAACE,YAAR,CAAsB,UAAtB,CAAjB;AACA,SAAOD,QAAQ,KAAK,IAAb,GAAoB,CAApB,GAAwBE,QAAQ,CAAEF,QAAF,EAAY,EAAZ,CAAvC;AACA;AAED;;;;;;;;;AAOO,SAASG,eAAT,CAA0BJ,OAA1B,EAAoC;AAC1C,SAAOD,WAAW,CAAEC,OAAF,CAAX,KAA2B,CAAC,CAAnC;AACA;AAED;;;;;;;;;;;;;AAWA,SAASK,0BAAT,CAAqCL,OAArC,EAA8CM,KAA9C,EAAsD;AACrD,SAAO;AAAEN,IAAAA,OAAO,EAAPA,OAAF;AAAWM,IAAAA,KAAK,EAALA;AAAX,GAAP;AACA;AAED;;;;;;;;;;AAQA,SAASC,0BAAT,CAAqCC,MAArC,EAA8C;AAC7C,SAAOA,MAAM,CAACR,OAAd;AACA;AAED;;;;;;;;;;;;AAUA,SAASS,sBAAT,CAAiCC,CAAjC,EAAoCC,CAApC,EAAwC;AACvC,MAAMC,SAAS,GAAGb,WAAW,CAAEW,CAAC,CAACV,OAAJ,CAA7B;AACA,MAAMa,SAAS,GAAGd,WAAW,CAAEY,CAAC,CAACX,OAAJ,CAA7B;;AAEA,MAAKY,SAAS,KAAKC,SAAnB,EAA+B;AAC9B,WAAOH,CAAC,CAACJ,KAAF,GAAUK,CAAC,CAACL,KAAnB;AACA;;AAED,SAAOM,SAAS,GAAGC,SAAnB;AACA;;AAEM,SAASC,IAAT,CAAeC,OAAf,EAAyB;AAC/B,SAAO,qBAAeA,OAAf,EACLC,MADK,CACGZ,eADH,EAELa,GAFK,CAEAZ,0BAFA,EAGLa,IAHK,CAGCT,sBAHD,EAILQ,GAJK,CAIAV,0BAJA,CAAP;AAKA","sourcesContent":["/**\n * Internal dependencies\n */\nimport { find as findFocusable } from './focusable';\n\n/**\n * Returns the tab index of the given element. In contrast with the tabIndex\n * property, this normalizes the default (0) to avoid browser inconsistencies,\n * operating under the assumption that this function is only ever called with a\n * focusable node.\n *\n * @see https://bugzilla.mozilla.org/show_bug.cgi?id=1190261\n *\n * @param {Element} element Element from which to retrieve.\n *\n * @return {?number} Tab index of element (default 0).\n */\nfunction getTabIndex( element ) {\n\tconst tabIndex = element.getAttribute( 'tabindex' );\n\treturn tabIndex === null ? 0 : parseInt( tabIndex, 10 );\n}\n\n/**\n * Returns true if the specified element is tabbable, or false otherwise.\n *\n * @param {Element} element Element to test.\n *\n * @return {boolean} Whether element is tabbable.\n */\nexport function isTabbableIndex( element ) {\n\treturn getTabIndex( element ) !== -1;\n}\n\n/**\n * An array map callback, returning an object with the element value and its\n * array index location as properties. This is used to emulate a proper stable\n * sort where equal tabIndex should be left in order of their occurrence in the\n * document.\n *\n * @param {Element} element Element.\n * @param {number}  index   Array index of element.\n *\n * @return {Object} Mapped object with element, index.\n */\nfunction mapElementToObjectTabbable( element, index ) {\n\treturn { element, index };\n}\n\n/**\n * An array map callback, returning an element of the given mapped object's\n * element value.\n *\n * @param {Object} object Mapped object with index.\n *\n * @return {Element} Mapped object element.\n */\nfunction mapObjectTabbableToElement( object ) {\n\treturn object.element;\n}\n\n/**\n * A sort comparator function used in comparing two objects of mapped elements.\n *\n * @see mapElementToObjectTabbable\n *\n * @param {Object} a First object to compare.\n * @param {Object} b Second object to compare.\n *\n * @return {number} Comparator result.\n */\nfunction compareObjectTabbables( a, b ) {\n\tconst aTabIndex = getTabIndex( a.element );\n\tconst bTabIndex = getTabIndex( b.element );\n\n\tif ( aTabIndex === bTabIndex ) {\n\t\treturn a.index - b.index;\n\t}\n\n\treturn aTabIndex - bTabIndex;\n}\n\nexport function find( context ) {\n\treturn findFocusable( context )\n\t\t.filter( isTabbableIndex )\n\t\t.map( mapElementToObjectTabbable )\n\t\t.sort( compareObjectTabbables )\n\t\t.map( mapObjectTabbableToElement );\n}\n"]}