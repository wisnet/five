{"version":3,"sources":["/Users/riad/Workspace/a8c/gutenberg/packages/blocks/src/block-content-provider/index.js"],"names":["createHigherOrderComponent","createContext","RawHTML","serialize","Consumer","Provider","BlockContentProvider","children","innerBlocks","BlockContent","html","withBlockContentContext","OriginalComponent","props","context"],"mappings":";;;AAAA;;;AAGA,SAASA,0BAAT,QAA2C,oBAA3C;AACA,SAASC,aAAT,EAAwBC,OAAxB,QAAuC,oBAAvC;AAEA;;;;AAGA,SAASC,SAAT,QAA0B,QAA1B;;qBAE+BF,aAAa,CAAE,YAAM,CAAE,CAAV,C;IAApCG,Q,kBAAAA,Q;IAAUC,Q,kBAAAA,Q;AAElB;;;;;;;;;;;;;;;;;;;AAiBA,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,OAAiC;AAAA,MAA7BC,QAA6B,QAA7BA,QAA6B;AAAA,MAAnBC,WAAmB,QAAnBA,WAAmB;;AAC7D,MAAMC,YAAY,GAAG,SAAfA,YAAe,GAAM;AAC1B;AACA,QAAMC,IAAI,GAAGP,SAAS,CAAEK,WAAF,CAAtB,CAF0B,CAI1B;;AACA,WAAO,cAAC,OAAD,QAAWE,IAAX,CAAP;AACA,GAND;;AAQA,SACC,cAAC,QAAD;AAAU,IAAA,KAAK,EAAGD;AAAlB,KACGF,QADH,CADD;AAKA,CAdD;AAgBA;;;;;;;;AAMA,OAAO,IAAMI,uBAAuB,GAAGX,0BAA0B,CAAE,UAAEY,iBAAF,EAAyB;AAC3F,SAAO,UAAEC,KAAF;AAAA,WACN,cAAC,QAAD,QACG,UAAEC,OAAF;AAAA,aACD,cAAC,iBAAD,eACMD,KADN;AAEC,QAAA,YAAY,EAAGC;AAFhB,SADC;AAAA,KADH,CADM;AAAA,GAAP;AAUA,CAXgE,EAW9D,yBAX8D,CAA1D;AAaP,eAAeR,oBAAf","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { createHigherOrderComponent } from '@wordpress/compose';\nimport { createContext, RawHTML } from '@wordpress/element';\n\n/**\n * Internal dependencies\n */\nimport { serialize } from '../api';\n\nconst { Consumer, Provider } = createContext( () => {} );\n\n/**\n * An internal block component used in block content serialization to inject\n * nested block content within the `save` implementation of the ancestor\n * component in which it is nested. The component provides a pre-bound\n * `BlockContent` component via context, which is used by the developer-facing\n * `InnerBlocks.Content` component to render block content.\n *\n * @example\n *\n * ```jsx\n * <BlockContentProvider innerBlocks={ innerBlocks }>\n * \t{ blockSaveElement }\n * </BlockContentProvider>\n * ```\n *\n * @return {WPElement} Element with BlockContent injected via context.\n */\nconst BlockContentProvider = ( { children, innerBlocks } ) => {\n\tconst BlockContent = () => {\n\t\t// Value is an array of blocks, so defer to block serializer\n\t\tconst html = serialize( innerBlocks );\n\n\t\t// Use special-cased raw HTML tag to avoid default escaping\n\t\treturn <RawHTML>{ html }</RawHTML>;\n\t};\n\n\treturn (\n\t\t<Provider value={ BlockContent }>\n\t\t\t{ children }\n\t\t</Provider>\n\t);\n};\n\n/**\n * A Higher Order Component used to inject BlockContent using context to the\n * wrapped component.\n *\n * @return {Component} Enhanced component with injected BlockContent as prop.\n */\nexport const withBlockContentContext = createHigherOrderComponent( ( OriginalComponent ) => {\n\treturn ( props ) => (\n\t\t<Consumer>\n\t\t\t{ ( context ) => (\n\t\t\t\t<OriginalComponent\n\t\t\t\t\t{ ...props }\n\t\t\t\t\tBlockContent={ context }\n\t\t\t\t/>\n\t\t\t) }\n\t\t</Consumer>\n\t);\n}, 'withBlockContentContext' );\n\nexport default BlockContentProvider;\n"]}