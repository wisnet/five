{"version":3,"sources":["/Users/riad/Workspace/a8c/gutenberg/packages/hooks/src/createRemoveHook.js"],"names":["createRemoveHook","hooks","removeAll","removeHook","hookName","namespace","handlersRemoved","handlers","length","runs","i","splice","__current","forEach","hookInfo","name","currentIndex"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;;;;;;;;AASA,SAASA,gBAAT,CAA2BC,KAA3B,EAAkCC,SAAlC,EAA8C;AAC7C;;;;;;;;;AASA,SAAO,SAASC,UAAT,CAAqBC,QAArB,EAA+BC,SAA/B,EAA2C;AACjD,QAAK,CAAE,+BAAkBD,QAAlB,CAAP,EAAsC;AACrC;AACA;;AAED,QAAK,CAAEF,SAAF,IAAe,CAAE,gCAAmBG,SAAnB,CAAtB,EAAuD;AACtD;AACA,KAPgD,CASjD;;;AACA,QAAK,CAAEJ,KAAK,CAAEG,QAAF,CAAZ,EAA2B;AAC1B,aAAO,CAAP;AACA;;AAED,QAAIE,eAAe,GAAG,CAAtB;;AAEA,QAAKJ,SAAL,EAAiB;AAChBI,MAAAA,eAAe,GAAGL,KAAK,CAAEG,QAAF,CAAL,CAAkBG,QAAlB,CAA2BC,MAA7C;AACAP,MAAAA,KAAK,CAAEG,QAAF,CAAL,GAAoB;AACnBK,QAAAA,IAAI,EAAER,KAAK,CAAEG,QAAF,CAAL,CAAkBK,IADL;AAEnBF,QAAAA,QAAQ,EAAE;AAFS,OAApB;AAIA,KAND,MAMO;AACN;AACA,UAAMA,QAAQ,GAAGN,KAAK,CAAEG,QAAF,CAAL,CAAkBG,QAAnC;;AAFM,iCAGIG,CAHJ;AAIL,YACCH,QAAQ,CAAEG,CAAF,CAAR,CAAcL,SAAd,KAA4BA,SAD7B,EAEE;AACDE,UAAAA,QAAQ,CAACI,MAAT,CAAiBD,CAAjB,EAAoB,CAApB;AACAJ,UAAAA,eAAe,GAFd,CAGD;AACA;AACA;AACA;AACA;;AACA,WAAEL,KAAK,CAACW,SAAN,IAAmB,EAArB,EAA0BC,OAA1B,CAAmC,UAAEC,QAAF,EAAgB;AAClD,gBAAKA,QAAQ,CAACC,IAAT,KAAkBX,QAAlB,IAA8BU,QAAQ,CAACE,YAAT,IAAyBN,CAA5D,EAAgE;AAC/DI,cAAAA,QAAQ,CAACE,YAAT;AACA;AACD,WAJD;AAKA;AAnBI;;AAGN,WAAM,IAAIN,CAAC,GAAGH,QAAQ,CAACC,MAAT,GAAkB,CAAhC,EAAmCE,CAAC,IAAI,CAAxC,EAA2CA,CAAC,EAA5C,EAAiD;AAAA,cAAvCA,CAAuC;AAiBhD;AACD;;AACD,QAAKN,QAAQ,KAAK,aAAlB,EAAkC;AACjC,sBAAU,aAAV,EAAyBA,QAAzB,EAAmCC,SAAnC;AACA;;AAED,WAAOC,eAAP;AACA,GAjDD;AAkDA;;eAEcN,gB","sourcesContent":["import validateNamespace from './validateNamespace.js';\nimport validateHookName from './validateHookName.js';\nimport { doAction } from './';\n\n/**\n * Returns a function which, when invoked, will remove a specified hook or all\n * hooks by the given name.\n *\n * @param  {Object}   hooks      Stored hooks, keyed by hook name.\n * @param  {boolean}     removeAll  Whether to remove all callbacks for a hookName, without regard to namespace. Used to create `removeAll*` functions.\n *\n * @return {Function}            Function that removes hooks.\n */\nfunction createRemoveHook( hooks, removeAll ) {\n\t/**\n\t * Removes the specified callback (or all callbacks) from the hook with a\n\t * given hookName and namespace.\n\t *\n\t * @param {string}    hookName  The name of the hook to modify.\n\t * @param {string}    namespace The unique namespace identifying the callback in the form `vendor/plugin/function`.\n\t *\n\t * @return {number}             The number of callbacks removed.\n\t */\n\treturn function removeHook( hookName, namespace ) {\n\t\tif ( ! validateHookName( hookName ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( ! removeAll && ! validateNamespace( namespace ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Bail if no hooks exist by this name\n\t\tif ( ! hooks[ hookName ] ) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tlet handlersRemoved = 0;\n\n\t\tif ( removeAll ) {\n\t\t\thandlersRemoved = hooks[ hookName ].handlers.length;\n\t\t\thooks[ hookName ] = {\n\t\t\t\truns: hooks[ hookName ].runs,\n\t\t\t\thandlers: [],\n\t\t\t};\n\t\t} else {\n\t\t\t// Try to find the specified callback to remove.\n\t\t\tconst handlers = hooks[ hookName ].handlers;\n\t\t\tfor ( let i = handlers.length - 1; i >= 0; i-- ) {\n\t\t\t\tif (\n\t\t\t\t\thandlers[ i ].namespace === namespace\n\t\t\t\t) {\n\t\t\t\t\thandlers.splice( i, 1 );\n\t\t\t\t\thandlersRemoved++;\n\t\t\t\t\t// This callback may also be part of a hook that is\n\t\t\t\t\t// currently executing.  If the callback we're removing\n\t\t\t\t\t// comes after the current callback, there's no problem;\n\t\t\t\t\t// otherwise we need to decrease the execution index of any\n\t\t\t\t\t// other runs by 1 to account for the removed element.\n\t\t\t\t\t( hooks.__current || [] ).forEach( ( hookInfo ) => {\n\t\t\t\t\t\tif ( hookInfo.name === hookName && hookInfo.currentIndex >= i ) {\n\t\t\t\t\t\t\thookInfo.currentIndex--;\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif ( hookName !== 'hookRemoved' ) {\n\t\t\tdoAction( 'hookRemoved', hookName, namespace );\n\t\t}\n\n\t\treturn handlersRemoved;\n\t};\n}\n\nexport default createRemoveHook;\n"]}