{"version":3,"sources":["/Users/riad/Workspace/a8c/gutenberg/packages/escape-html/src/index.js"],"names":["REGEXP_INVALID_ATTRIBUTE_NAME","escapeAmpersand","value","replace","escapeQuotationMark","escapeLessThan","escapeAttribute","escapeHTML","isValidAttributeName","name","test"],"mappings":";;;;;;;;;;;;AAAA;;;;;;;;;;;AAWA,IAAMA,6BAA6B,GAAG,qCAAtC;AAEA;;;;;;;;;;;;;;;AAcO,SAASC,eAAT,CAA0BC,KAA1B,EAAkC;AACxC,SAAOA,KAAK,CAACC,OAAN,CAAe,yCAAf,EAA0D,OAA1D,CAAP;AACA;AAED;;;;;;;;;AAOO,SAASC,mBAAT,CAA8BF,KAA9B,EAAsC;AAC5C,SAAOA,KAAK,CAACC,OAAN,CAAe,IAAf,EAAqB,QAArB,CAAP;AACA;AAED;;;;;;;;;AAOO,SAASE,cAAT,CAAyBH,KAAzB,EAAiC;AACvC,SAAOA,KAAK,CAACC,OAAN,CAAe,IAAf,EAAqB,MAArB,CAAP;AACA;AAED;;;;;;;;;;;;;;AAYO,SAASG,eAAT,CAA0BJ,KAA1B,EAAkC;AACxC,SAAOE,mBAAmB,CAAEH,eAAe,CAAEC,KAAF,CAAjB,CAA1B;AACA;AAED;;;;;;;;;;;;;;AAYO,SAASK,UAAT,CAAqBL,KAArB,EAA6B;AACnC,SAAOG,cAAc,CAAEJ,eAAe,CAAEC,KAAF,CAAjB,CAArB;AACA;AAED;;;;;;;;;AAOO,SAASM,oBAAT,CAA+BC,IAA/B,EAAsC;AAC5C,SAAO,CAAET,6BAA6B,CAACU,IAA9B,CAAoCD,IAApC,CAAT;AACA","sourcesContent":["/**\n * Regular expression matching invalid attribute names.\n *\n * \"Attribute names must consist of one or more characters other than controls,\n * U+0020 SPACE, U+0022 (\"), U+0027 ('), U+003E (>), U+002F (/), U+003D (=),\n * and noncharacters.\"\n *\n * @link https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n *\n * @type {RegExp}\n */\nconst REGEXP_INVALID_ATTRIBUTE_NAME = /[\\u007F-\\u009F \"'>/=\"\\uFDD0-\\uFDEF]/;\n\n/**\n * Returns a string with ampersands escaped. Note that this is an imperfect\n * implementation, where only ampersands which do not appear as a pattern of\n * named, decimal, or hexadecimal character references are escaped. Invalid\n * named references (i.e. ambiguous ampersand) are are still permitted.\n *\n * @link https://w3c.github.io/html/syntax.html#character-references\n * @link https://w3c.github.io/html/syntax.html#ambiguous-ampersand\n * @link https://w3c.github.io/html/syntax.html#named-character-references\n *\n * @param {string} value Original string.\n *\n * @return {string} Escaped string.\n */\nexport function escapeAmpersand( value ) {\n\treturn value.replace( /&(?!([a-z0-9]+|#[0-9]+|#x[a-f0-9]+);)/gi, '&amp;' );\n}\n\n/**\n * Returns a string with quotation marks replaced.\n *\n * @param {string} value Original string.\n *\n * @return {string} Escaped string.\n */\nexport function escapeQuotationMark( value ) {\n\treturn value.replace( /\"/g, '&quot;' );\n}\n\n/**\n * Returns a string with less-than sign replaced.\n *\n * @param {string} value Original string.\n *\n * @return {string} Escaped string.\n */\nexport function escapeLessThan( value ) {\n\treturn value.replace( /</g, '&lt;' );\n}\n\n/**\n * Returns an escaped attribute value.\n *\n * @link https://w3c.github.io/html/syntax.html#elements-attributes\n *\n * \"[...] the text cannot contain an ambiguous ampersand [...] must not contain\n * any literal U+0022 QUOTATION MARK characters (\")\"\n *\n * @param {string} value Attribute value.\n *\n * @return {string} Escaped attribute value.\n */\nexport function escapeAttribute( value ) {\n\treturn escapeQuotationMark( escapeAmpersand( value ) );\n}\n\n/**\n * Returns an escaped HTML element value.\n *\n * @link https://w3c.github.io/html/syntax.html#writing-html-documents-elements\n *\n * \"the text must not contain the character U+003C LESS-THAN SIGN (<) or an\n * ambiguous ampersand.\"\n *\n * @param {string} value Element value.\n *\n * @return {string} Escaped HTML element value.\n */\nexport function escapeHTML( value ) {\n\treturn escapeLessThan( escapeAmpersand( value ) );\n}\n\n/**\n * Returns true if the given attribute name is valid, or false otherwise.\n *\n * @param {string} name Attribute name to test.\n *\n * @return {boolean} Whether attribute is valid.\n */\nexport function isValidAttributeName( name ) {\n\treturn ! REGEXP_INVALID_ATTRIBUTE_NAME.test( name );\n}\n"]}