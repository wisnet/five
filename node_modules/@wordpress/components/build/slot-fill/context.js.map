{"version":3,"sources":["/Users/riad/Workspace/a8c/gutenberg/packages/components/src/slot-fill/context.js"],"names":["registerSlot","unregisterSlot","registerFill","unregisterFill","getSlot","getFills","Provider","Consumer","SlotFillProvider","arguments","bind","slots","fills","state","name","slot","forceUpdateFills","forceUpdateSlot","instance","resetFillOccurrence","resetOccurrence","forceUpdate","props","children","Component"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { sortBy, forEach, without } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { Component, createContext } from '@wordpress/element';\n\nconst { Provider, Consumer } = createContext( {\n\tregisterSlot: () => {},\n\tunregisterSlot: () => {},\n\tregisterFill: () => {},\n\tunregisterFill: () => {},\n\tgetSlot: () => {},\n\tgetFills: () => {},\n} );\n\nclass SlotFillProvider extends Component {\n\tconstructor() {\n\t\tsuper( ...arguments );\n\n\t\tthis.registerSlot = this.registerSlot.bind( this );\n\t\tthis.registerFill = this.registerFill.bind( this );\n\t\tthis.unregisterSlot = this.unregisterSlot.bind( this );\n\t\tthis.unregisterFill = this.unregisterFill.bind( this );\n\t\tthis.getSlot = this.getSlot.bind( this );\n\t\tthis.getFills = this.getFills.bind( this );\n\n\t\tthis.slots = {};\n\t\tthis.fills = {};\n\t\tthis.state = {\n\t\t\tregisterSlot: this.registerSlot,\n\t\t\tunregisterSlot: this.unregisterSlot,\n\t\t\tregisterFill: this.registerFill,\n\t\t\tunregisterFill: this.unregisterFill,\n\t\t\tgetSlot: this.getSlot,\n\t\t\tgetFills: this.getFills,\n\t\t};\n\t}\n\n\tregisterSlot( name, slot ) {\n\t\tthis.slots[ name ] = slot;\n\t\tthis.forceUpdateFills( name );\n\n\t\t// Sometimes the fills are registered after the initial render of slot\n\t\t// But before the registerSlot call, we need to rerender the slot\n\t\tthis.forceUpdateSlot( name );\n\t}\n\n\tregisterFill( name, instance ) {\n\t\tthis.fills[ name ] = [\n\t\t\t...( this.fills[ name ] || [] ),\n\t\t\tinstance,\n\t\t];\n\t\tthis.forceUpdateSlot( name );\n\t}\n\n\tunregisterSlot( name ) {\n\t\tdelete this.slots[ name ];\n\t\tthis.forceUpdateFills( name );\n\t}\n\n\tunregisterFill( name, instance ) {\n\t\tthis.fills[ name ] = without(\n\t\t\tthis.fills[ name ],\n\t\t\tinstance\n\t\t);\n\t\tthis.resetFillOccurrence( name );\n\t\tthis.forceUpdateSlot( name );\n\t}\n\n\tgetSlot( name ) {\n\t\treturn this.slots[ name ];\n\t}\n\n\tgetFills( name ) {\n\t\treturn sortBy( this.fills[ name ], 'occurrence' );\n\t}\n\n\tresetFillOccurrence( name ) {\n\t\tforEach( this.fills[ name ], ( instance ) => {\n\t\t\tinstance.resetOccurrence();\n\t\t} );\n\t}\n\n\tforceUpdateFills( name ) {\n\t\tforEach( this.fills[ name ], ( instance ) => {\n\t\t\tinstance.forceUpdate();\n\t\t} );\n\t}\n\n\tforceUpdateSlot( name ) {\n\t\tconst slot = this.getSlot( name );\n\n\t\tif ( slot ) {\n\t\t\tslot.forceUpdate();\n\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Provider value={ this.state }>\n\t\t\t\t{ this.props.children }\n\t\t\t</Provider>\n\t\t);\n\t}\n}\n\nexport default SlotFillProvider;\nexport { Consumer };\n"]}