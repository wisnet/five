{"version":3,"sources":["/Users/gziolo/PhpstormProjects/gutenberg/packages/keycodes/src/index.js"],"names":["BACKSPACE","TAB","ENTER","ESCAPE","SPACE","LEFT","UP","RIGHT","DOWN","DELETE","F10","ALT","CTRL","COMMAND","SHIFT","modifiers","primary","_isApple","primaryShift","primaryAlt","secondary","access","ctrl","alt","ctrlShift","shift","shiftAlt","rawShortcut","modifier","character","isAppleOS","toLowerCase","join","displayShortcutList","isApple","replacementKeyMap","modifierKeys","reduce","accumulator","key","replacementKey","capitalizedCharacter","displayShortcut","shortcutList","shortcutAriaLabel","map","isKeyboardEvent","getModifiers","event","mods","every"],"mappings":"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","sourcesContent":["/**\n * Note: The order of the modifier keys in many of the [foo]Shortcut()\n * functions in this file are intentional and should not be changed. They're\n * designed to fit with the standard menu keyboard shortcuts shown in the\n * user's platform.\n *\n * For example, on MacOS menu shortcuts will place Shift before Command, but\n * on Windows Control will usually come first. So don't provide your own\n * shortcut combos directly to keyboardShortcut().\n */\n\n/**\n * External dependencies\n */\nimport { get, mapValues, includes, capitalize } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { __ } from '@wordpress/i18n';\n\n/**\n * Internal dependencies\n */\nimport { isAppleOS } from './platform';\n\nexport const BACKSPACE = 8;\nexport const TAB = 9;\nexport const ENTER = 13;\nexport const ESCAPE = 27;\nexport const SPACE = 32;\nexport const LEFT = 37;\nexport const UP = 38;\nexport const RIGHT = 39;\nexport const DOWN = 40;\nexport const DELETE = 46;\n\nexport const F10 = 121;\n\nexport const ALT = 'alt';\nexport const CTRL = 'ctrl';\n// Understood in both Mousetrap and TinyMCE.\nexport const COMMAND = 'meta';\nexport const SHIFT = 'shift';\n\nexport const modifiers = {\n\tprimary: ( _isApple ) => _isApple() ? [ COMMAND ] : [ CTRL ],\n\tprimaryShift: ( _isApple ) => _isApple() ? [ SHIFT, COMMAND ] : [ CTRL, SHIFT ],\n\tprimaryAlt: ( _isApple ) => _isApple() ? [ ALT, COMMAND ] : [ CTRL, ALT ],\n\tsecondary: ( _isApple ) => _isApple() ? [ SHIFT, ALT, COMMAND ] : [ CTRL, SHIFT, ALT ],\n\taccess: ( _isApple ) => _isApple() ? [ CTRL, ALT ] : [ SHIFT, ALT ],\n\tctrl: () => [ CTRL ],\n\talt: () => [ ALT ],\n\tctrlShift: () => [ CTRL, SHIFT ],\n\tshift: () => [ SHIFT ],\n\tshiftAlt: () => [ SHIFT, ALT ],\n};\n\n/**\n * An object that contains functions to get raw shortcuts.\n * E.g. rawShortcut.primary( 'm' ) will return 'meta+m' on Mac.\n * These are intended for user with the KeyboardShortcuts component or TinyMCE.\n *\n * @type {Object} Keyed map of functions to raw shortcuts.\n */\nexport const rawShortcut = mapValues( modifiers, ( modifier ) => {\n\treturn ( character, _isApple = isAppleOS ) => {\n\t\treturn [ ...modifier( _isApple ), character.toLowerCase() ].join( '+' );\n\t};\n} );\n\n/**\n * Return an array of the parts of a keyboard shortcut chord for display\n * E.g displayShortcutList.primary( 'm' ) will return [ '⌘', 'M' ] on Mac.\n *\n * @type {Object} keyed map of functions to shortcut sequences\n */\nexport const displayShortcutList = mapValues( modifiers, ( modifier ) => {\n\treturn ( character, _isApple = isAppleOS ) => {\n\t\tconst isApple = _isApple();\n\t\tconst replacementKeyMap = {\n\t\t\t[ ALT ]: isApple ? '⌥' : 'Alt',\n\t\t\t[ CTRL ]: isApple ? '^' : 'Ctrl',\n\t\t\t[ COMMAND ]: '⌘',\n\t\t\t[ SHIFT ]: isApple ? '⇧' : 'Shift',\n\t\t};\n\n\t\tconst modifierKeys = modifier( _isApple ).reduce( ( accumulator, key ) => {\n\t\t\tconst replacementKey = get( replacementKeyMap, key, key );\n\t\t\t// If on the Mac, adhere to platform convention and don't show plus between keys.\n\t\t\tif ( isApple ) {\n\t\t\t\treturn [ ...accumulator, replacementKey ];\n\t\t\t}\n\n\t\t\treturn [ ...accumulator, replacementKey, '+' ];\n\t\t}, [] );\n\n\t\tconst capitalizedCharacter = capitalize( character );\n\t\treturn [ ...modifierKeys, capitalizedCharacter ];\n\t};\n} );\n\n/**\n * An object that contains functions to display shortcuts.\n * E.g. displayShortcut.primary( 'm' ) will return '⌘M' on Mac.\n *\n * @type {Object} Keyed map of functions to display shortcuts.\n */\nexport const displayShortcut = mapValues( displayShortcutList, ( shortcutList ) => {\n\treturn ( character, _isApple = isAppleOS ) => shortcutList( character, _isApple ).join( '' );\n} );\n\n/**\n * An object that contains functions to return an aria label for a keyboard shortcut.\n * E.g. shortcutAriaLabel.primary( '.' ) will return 'Command + Period' on Mac.\n */\nexport const shortcutAriaLabel = mapValues( modifiers, ( modifier ) => {\n\treturn ( character, _isApple = isAppleOS ) => {\n\t\tconst isApple = _isApple();\n\t\tconst replacementKeyMap = {\n\t\t\t[ SHIFT ]: 'Shift',\n\t\t\t[ COMMAND ]: isApple ? 'Command' : 'Control',\n\t\t\t[ CTRL ]: 'Control',\n\t\t\t[ ALT ]: isApple ? 'Option' : 'Alt',\n\t\t\t/* translators: comma as in the character ',' */\n\t\t\t',': __( 'Comma' ),\n\t\t\t/* translators: period as in the character '.' */\n\t\t\t'.': __( 'Period' ),\n\t\t\t/* translators: backtick as in the character '`' */\n\t\t\t'`': __( 'Backtick' ),\n\t\t};\n\n\t\treturn [ ...modifier( _isApple ), character ]\n\t\t\t.map( ( key ) => capitalize( get( replacementKeyMap, key, key ) ) )\n\t\t\t.join( isApple ? ' ' : ' + ' );\n\t};\n} );\n\n/**\n * An object that contains functions to check if a keyboard event matches a\n * predefined shortcut combination.\n * E.g. isKeyboardEvent.primary( event, 'm' ) will return true if the event\n * signals pressing ⌘M.\n *\n * @type {Object} Keyed map of functions to match events.\n */\nexport const isKeyboardEvent = mapValues( modifiers, ( getModifiers ) => {\n\treturn ( event, character, _isApple = isAppleOS ) => {\n\t\tconst mods = getModifiers( _isApple );\n\n\t\tif ( ! mods.every( ( key ) => event[ `${ key }Key` ] ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( ! character ) {\n\t\t\treturn includes( mods, event.key.toLowerCase() );\n\t\t}\n\n\t\treturn event.key === character;\n\t};\n} );\n"]}