{"version":3,"sources":["/Users/riad/Workspace/a8c/gutenberg/packages/rich-text/src/normalise-formats.js"],"names":["normaliseFormats","formats","text","start","end","newFormats","slice","forEach","formatsAtIndex","index","lastFormatsAtIndex","newFormatsAtIndex","format","formatIndex","lastFormat"],"mappings":";;;;;;;AAIA;;AAJA;;;;AAMA;;;;;;;AAOO,SAASA,gBAAT,OAA2D;AAAA,MAA9BC,OAA8B,QAA9BA,OAA8B;AAAA,MAArBC,IAAqB,QAArBA,IAAqB;AAAA,MAAfC,KAAe,QAAfA,KAAe;AAAA,MAARC,GAAQ,QAARA,GAAQ;AACjE,MAAMC,UAAU,GAAGJ,OAAO,CAACK,KAAR,CAAe,CAAf,CAAnB;AAEAD,EAAAA,UAAU,CAACE,OAAX,CAAoB,UAAEC,cAAF,EAAkBC,KAAlB,EAA6B;AAChD,QAAMC,kBAAkB,GAAGL,UAAU,CAAEI,KAAK,GAAG,CAAV,CAArC;;AAEA,QAAKC,kBAAL,EAA0B;AACzB,UAAMC,iBAAiB,GAAGH,cAAc,CAACF,KAAf,CAAsB,CAAtB,CAA1B;AAEAK,MAAAA,iBAAiB,CAACJ,OAAlB,CAA2B,UAAEK,MAAF,EAAUC,WAAV,EAA2B;AACrD,YAAMC,UAAU,GAAGJ,kBAAkB,CAAEG,WAAF,CAArC;;AAEA,YAAK,kCAAeD,MAAf,EAAuBE,UAAvB,CAAL,EAA2C;AAC1CH,UAAAA,iBAAiB,CAAEE,WAAF,CAAjB,GAAmCC,UAAnC;AACA;AACD,OAND;AAQAT,MAAAA,UAAU,CAAEI,KAAF,CAAV,GAAsBE,iBAAtB;AACA;AACD,GAhBD;AAkBA,SAAO;AAAEV,IAAAA,OAAO,EAAEI,UAAX;AAAuBH,IAAAA,IAAI,EAAJA,IAAvB;AAA6BC,IAAAA,KAAK,EAALA,KAA7B;AAAoCC,IAAAA,GAAG,EAAHA;AAApC,GAAP;AACA","sourcesContent":["/**\n * Internal dependencies\n */\n\nimport { isFormatEqual } from './is-format-equal';\n\n/**\n * Normalises formats: ensures subsequent equal formats have the same reference.\n *\n * @param  {Object} value Value to normalise formats of.\n *\n * @return {Object} New value with normalised formats.\n */\nexport function normaliseFormats( { formats, text, start, end } ) {\n\tconst newFormats = formats.slice( 0 );\n\n\tnewFormats.forEach( ( formatsAtIndex, index ) => {\n\t\tconst lastFormatsAtIndex = newFormats[ index - 1 ];\n\n\t\tif ( lastFormatsAtIndex ) {\n\t\t\tconst newFormatsAtIndex = formatsAtIndex.slice( 0 );\n\n\t\t\tnewFormatsAtIndex.forEach( ( format, formatIndex ) => {\n\t\t\t\tconst lastFormat = lastFormatsAtIndex[ formatIndex ];\n\n\t\t\t\tif ( isFormatEqual( format, lastFormat ) ) {\n\t\t\t\t\tnewFormatsAtIndex[ formatIndex ] = lastFormat;\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tnewFormats[ index ] = newFormatsAtIndex;\n\t\t}\n\t} );\n\n\treturn { formats: newFormats, text, start, end };\n}\n"]}