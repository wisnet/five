{"version":3,"sources":["/Users/riad/Workspace/a8c/gutenberg/packages/components/src/keyboard-shortcuts/index.js"],"names":["Mousetrap","forEach","Component","Children","KeyboardShortcuts","arguments","bindKeyTarget","bind","keyTarget","document","mousetrap","props","shortcuts","callback","key","bindGlobal","eventName","bindFn","reset","node","children","count"],"mappings":";;;;;;;;AAAA;;;AAGA,OAAOA,SAAP,MAAsB,WAAtB;AACA,OAAO,qDAAP;AACA,SAASC,OAAT,QAAwB,QAAxB;AAEA;;;;AAGA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,oBAApC;;IAEMC,iB;;;;;AACL,+BAAc;AAAA;;AAAA;;AACb,4FAAUC,SAAV;AAEA,UAAKC,aAAL,GAAqB,MAAKA,aAAL,CAAmBC,IAAnB,uDAArB;AAHa;AAIb;;;;wCAEmB;AAAA;;AAAA,4BACc,IADd,CACXC,SADW;AAAA,UACXA,SADW,gCACCC,QADD;AAGnB,WAAKC,SAAL,GAAiB,IAAIV,SAAJ,CAAeQ,SAAf,CAAjB;AACAP,MAAAA,OAAO,CAAE,KAAKU,KAAL,CAAWC,SAAb,EAAwB,UAAEC,QAAF,EAAYC,GAAZ,EAAqB;AAAA,2BACjB,MAAI,CAACH,KADY;AAAA,YAC3CI,UAD2C,gBAC3CA,UAD2C;AAAA,YAC/BC,SAD+B,gBAC/BA,SAD+B;AAEnD,YAAMC,MAAM,GAAGF,UAAU,GAAG,YAAH,GAAkB,MAA3C;;AACA,QAAA,MAAI,CAACL,SAAL,CAAgBO,MAAhB,EAA0BH,GAA1B,EAA+BD,QAA/B,EAAyCG,SAAzC;AACA,OAJM,CAAP;AAKA;;;2CAEsB;AACtB,WAAKN,SAAL,CAAeQ,KAAf;AACA;AAED;;;;;;;;;kCAMeC,I,EAAO;AACrB,WAAKX,SAAL,GAAiBW,IAAjB;AACA;;;6BAEQ;AACR;AACA;AAFQ,UAGAC,QAHA,GAGa,KAAKT,KAHlB,CAGAS,QAHA;;AAIR,UAAK,CAAEjB,QAAQ,CAACkB,KAAT,CAAgBD,QAAhB,CAAP,EAAoC;AACnC,eAAO,IAAP;AACA;;AAED,aAAO;AAAK,QAAA,GAAG,EAAG,KAAKd;AAAhB,SAAkCc,QAAlC,CAAP;AACA;;;;EAzC8BlB,S;;AA4ChC,eAAeE,iBAAf","sourcesContent":["/**\n * External dependencies\n */\nimport Mousetrap from 'mousetrap';\nimport 'mousetrap/plugins/global-bind/mousetrap-global-bind';\nimport { forEach } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { Component, Children } from '@wordpress/element';\n\nclass KeyboardShortcuts extends Component {\n\tconstructor() {\n\t\tsuper( ...arguments );\n\n\t\tthis.bindKeyTarget = this.bindKeyTarget.bind( this );\n\t}\n\n\tcomponentDidMount() {\n\t\tconst { keyTarget = document } = this;\n\n\t\tthis.mousetrap = new Mousetrap( keyTarget );\n\t\tforEach( this.props.shortcuts, ( callback, key ) => {\n\t\t\tconst { bindGlobal, eventName } = this.props;\n\t\t\tconst bindFn = bindGlobal ? 'bindGlobal' : 'bind';\n\t\t\tthis.mousetrap[ bindFn ]( key, callback, eventName );\n\t\t} );\n\t}\n\n\tcomponentWillUnmount() {\n\t\tthis.mousetrap.reset();\n\t}\n\n\t/**\n\t * When rendering with children, binds the wrapper node on which events\n\t * will be bound.\n\t *\n\t * @param {Element} node Key event target.\n\t */\n\tbindKeyTarget( node ) {\n\t\tthis.keyTarget = node;\n\t}\n\n\trender() {\n\t\t// Render as non-visual if there are no children pressed. Keyboard\n\t\t// events will be bound to the document instead.\n\t\tconst { children } = this.props;\n\t\tif ( ! Children.count( children ) ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn <div ref={ this.bindKeyTarget }>{ children }</div>;\n\t}\n}\n\nexport default KeyboardShortcuts;\n"]}