import _extends from "@babel/runtime/helpers/esm/extends";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread";
import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import { Svg } from 'react-native-svg';
/**
 * Internal dependencies
 */

import styles from './style.scss';
export { Circle, G, Path, Polygon, Rect } from 'react-native-svg';
export var SVG = function SVG(props) {
  // We're using the react-native-classname-to-style plugin, so when a `className` prop is passed it gets converted to `style` here.
  // Given it carries a string (as it was originally className) but an object is expected for `style`,
  // we need to check whether `style` exists and is a string, and convert it to an object
  var styleValues = {};

  if (typeof props.style === 'string') {
    var oneStyle = props.style.split(' ').map(function (element) {
      return styles[element];
    }).filter(Boolean);
    styleValues = Object.assign.apply(Object, [styleValues].concat(_toConsumableArray(oneStyle)));
  }

  var safeProps = _objectSpread({}, props, {
    style: styleValues
  });

  return createElement(Svg //We want to re-render when style color is changed
  , _extends({
    key: safeProps.style.color,
    height: "100%",
    width: "100%"
  }, safeProps));
};
//# sourceMappingURL=index.native.js.map