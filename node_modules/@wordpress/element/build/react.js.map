{"version":3,"sources":["/Users/riad/Workspace/a8c/gutenberg/packages/element/src/react.js"],"names":["concatChildren","childrenArguments","reduce","memo","children","i","Children","forEach","child","j","key","join","push","switchChildrenNodeName","nodeName","map","elt","index","props","childrenProp"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;AAYA;;AAfA;;;;AAmBA;;;;;;;;;AAUA;;;;AAKA;;;;;;;;AASA;;;;;;;;;;;;;AAcA;;;;;;;;AASA;;;;;;;;;;;;AAaA;;;;AAKA;;;;;;;;AAWA;;;;;;;AAOO,SAASA,cAAT,GAAgD;AAAA,oCAApBC,iBAAoB;AAApBA,IAAAA,iBAAoB;AAAA;;AACtD,SAAOA,iBAAiB,CAACC,MAAlB,CAA0B,UAAEC,IAAF,EAAQC,QAAR,EAAkBC,CAAlB,EAAyB;AACzDC,oBAASC,OAAT,CAAkBH,QAAlB,EAA4B,UAAEI,KAAF,EAASC,CAAT,EAAgB;AAC3C,UAAKD,KAAK,IAAI,aAAa,OAAOA,KAAlC,EAA0C;AACzCA,QAAAA,KAAK,GAAG,yBAAcA,KAAd,EAAqB;AAC5BE,UAAAA,GAAG,EAAE,CAAEL,CAAF,EAAKI,CAAL,EAASE,IAAT;AADuB,SAArB,CAAR;AAGA;;AAEDR,MAAAA,IAAI,CAACS,IAAL,CAAWJ,KAAX;AACA,KARD;;AAUA,WAAOL,IAAP;AACA,GAZM,EAYJ,EAZI,CAAP;AAaA;AAED;;;;;;;;;;AAQO,SAASU,sBAAT,CAAiCT,QAAjC,EAA2CU,QAA3C,EAAsD;AAC5D,SAAOV,QAAQ,IAAIE,gBAASS,GAAT,CAAcX,QAAd,EAAwB,UAAEY,GAAF,EAAOC,KAAP,EAAkB;AAC5D,QAAK,sBAAUD,GAAV,CAAL,EAAuB;AACtB,aAAO,0BAAeF,QAAf,EAAyB;AAAEJ,QAAAA,GAAG,EAAEO;AAAP,OAAzB,EAAyCD,GAAzC,CAAP;AACA;;AAH2D,qBAIfA,GAAG,CAACE,KAJW;AAAA,QAI1CC,YAJ0C,cAIpDf,QAJoD;AAAA,QAIzBc,KAJyB;AAK5D,WAAO,0BAAeJ,QAAf;AAA2BJ,MAAAA,GAAG,EAAEO;AAAhC,OAA0CC,KAA1C,GAAmDC,YAAnD,CAAP;AACA,GANkB,CAAnB;AAOA","sourcesContent":["/**\n * External dependencies\n */\nimport {\n\tChildren,\n\tcloneElement,\n\tComponent,\n\tcreateContext,\n\tcreateElement,\n\tcreateRef,\n\tforwardRef,\n\tFragment,\n\tisValidElement,\n\tStrictMode,\n} from 'react';\nimport { isString } from 'lodash';\n\nexport { Children };\n\n/**\n * Creates a copy of an element with extended props.\n *\n * @param {WPElement} element Element\n * @param {?Object}   props   Props to apply to cloned element\n *\n * @return {WPElement} Cloned element.\n */\nexport { cloneElement };\n\n/**\n * A base class to create WordPress Components (Refs, state and lifecycle hooks)\n */\nexport { Component };\n\n/**\n * Creates a context object containing two components: a provider and consumer.\n *\n * @param {Object} defaultValue A default data stored in the context.\n *\n * @return {Object} Context object.\n */\nexport { createContext };\n\n/**\n * Returns a new element of given type. Type can be either a string tag name or\n * another function which itself returns an element.\n *\n * @param {?(string|Function)} type     Tag name or element creator\n * @param {Object}             props    Element properties, either attribute\n *                                       set to apply to DOM node or values to\n *                                       pass through to element creator\n * @param {...WPElement}       children Descendant elements\n *\n * @return {WPElement} Element.\n */\nexport { createElement };\n\n/**\n * Returns an object tracking a reference to a rendered element via its\n * `current` property as either a DOMElement or Element, dependent upon the\n * type of element rendered with the ref attribute.\n *\n * @return {Object} Ref object.\n */\nexport { createRef };\n\n/**\n * Component enhancer used to enable passing a ref to its wrapped component.\n * Pass a function argument which receives `props` and `ref` as its arguments,\n * returning an element using the forwarded ref. The return value is a new\n * component which forwards its ref.\n *\n * @param {Function} forwarder Function passed `props` and `ref`, expected to\n *                             return an element.\n *\n * @return {WPComponent} Enhanced component.\n */\nexport { forwardRef };\n\n/**\n * A component which renders its children without any wrapping element.\n */\nexport { Fragment };\n\n/**\n * Checks if an object is a valid WPElement\n *\n * @param {Object} objectToCheck The object to be checked.\n *\n * @return {boolean} true if objectToTest is a valid WPElement and false otherwise.\n */\nexport { isValidElement };\n\nexport { StrictMode };\n\n/**\n * Concatenate two or more React children objects.\n *\n * @param {...?Object} childrenArguments Array of children arguments (array of arrays/strings/objects) to concatenate.\n *\n * @return {Array} The concatenated value.\n */\nexport function concatChildren( ...childrenArguments ) {\n\treturn childrenArguments.reduce( ( memo, children, i ) => {\n\t\tChildren.forEach( children, ( child, j ) => {\n\t\t\tif ( child && 'string' !== typeof child ) {\n\t\t\t\tchild = cloneElement( child, {\n\t\t\t\t\tkey: [ i, j ].join(),\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\tmemo.push( child );\n\t\t} );\n\n\t\treturn memo;\n\t}, [] );\n}\n\n/**\n * Switches the nodeName of all the elements in the children object.\n *\n * @param {?Object} children Children object.\n * @param {string}  nodeName Node name.\n *\n * @return {?Object} The updated children object.\n */\nexport function switchChildrenNodeName( children, nodeName ) {\n\treturn children && Children.map( children, ( elt, index ) => {\n\t\tif ( isString( elt ) ) {\n\t\t\treturn createElement( nodeName, { key: index }, elt );\n\t\t}\n\t\tconst { children: childrenProp, ...props } = elt.props;\n\t\treturn createElement( nodeName, { key: index, ...props }, childrenProp );\n\t} );\n}\n"]}