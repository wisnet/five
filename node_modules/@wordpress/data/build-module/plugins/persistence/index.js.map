{"version":3,"sources":["/Users/riad/Workspace/a8c/gutenberg/packages/data/src/plugins/persistence/index.js"],"names":["pick","flow","defaultStorage","DEFAULT_STORAGE","DEFAULT_STORAGE_KEY","withInitialState","reducer","initialState","state","action","createPersistenceInterface","options","storage","storageKey","data","get","undefined","persisted","getItem","JSON","parse","error","set","key","value","setItem","stringify","registry","pluginOptions","persistence","createPersistOnChange","getState","reducerKey","keys","lastState","result","Array","isArray","registerStore","persist","store","dispatch"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { pick, flow } from 'lodash';\n\n/**\n * Internal dependencies\n */\nimport defaultStorage from './storage/default';\n\n/**\n * Persistence plugin options.\n *\n * @property {Storage} storage    Persistent storage implementation. This must\n *                                at least implement `getItem` and `setItem` of\n *                                the Web Storage API.\n * @property {string}  storageKey Key on which to set in persistent storage.\n *\n * @typedef {WPDataPersistencePluginOptions}\n */\n\n/**\n * Default plugin storage.\n *\n * @type {Storage}\n */\nconst DEFAULT_STORAGE = defaultStorage;\n\n/**\n * Default plugin storage key.\n *\n * @type {string}\n */\nconst DEFAULT_STORAGE_KEY = 'WP_DATA';\n\n/**\n * Higher-order reducer to provides an initial value when state is undefined.\n *\n * @param {Function} reducer      Original reducer.\n * @param {*}         initialState Value to use as initial state.\n *\n * @return {Function} Enhanced reducer.\n */\nexport function withInitialState( reducer, initialState ) {\n\treturn ( state = initialState, action ) => {\n\t\treturn reducer( state, action );\n\t};\n}\n\n/**\n * Creates a persistence interface, exposing getter and setter methods (`get`\n * and `set` respectively).\n *\n * @param {WPDataPersistencePluginOptions} options Plugin options.\n *\n * @return {Object} Persistence interface.\n */\nexport function createPersistenceInterface( options ) {\n\tconst {\n\t\tstorage = DEFAULT_STORAGE,\n\t\tstorageKey = DEFAULT_STORAGE_KEY,\n\t} = options;\n\n\tlet data;\n\n\t/**\n\t * Returns the persisted data as an object, defaulting to an empty object.\n\t *\n\t * @return {Object} Persisted data.\n\t */\n\tfunction get() {\n\t\tif ( data === undefined ) {\n\t\t\t// If unset, getItem is expected to return null. Fall back to\n\t\t\t// empty object.\n\t\t\tconst persisted = storage.getItem( storageKey );\n\t\t\tif ( persisted === null ) {\n\t\t\t\tdata = {};\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tdata = JSON.parse( persisted );\n\t\t\t\t} catch ( error ) {\n\t\t\t\t\t// Similarly, should any error be thrown during parse of\n\t\t\t\t\t// the string (malformed JSON), fall back to empty object.\n\t\t\t\t\tdata = {};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn data;\n\t}\n\n\t/**\n\t * Merges an updated reducer state into the persisted data.\n\t *\n\t * @param {string} key   Key to update.\n\t * @param {*}      value Updated value.\n\t */\n\tfunction set( key, value ) {\n\t\tdata = { ...data, [ key ]: value };\n\t\tstorage.setItem( storageKey, JSON.stringify( data ) );\n\t}\n\n\treturn { get, set };\n}\n\n/**\n * Data plugin to persist store state into a single storage key.\n *\n * @param {WPDataRegistry}                  registry      Data registry.\n * @param {?WPDataPersistencePluginOptions} pluginOptions Plugin options.\n *\n * @return {WPDataPlugin} Data plugin.\n */\nexport default function( registry, pluginOptions ) {\n\tconst persistence = createPersistenceInterface( pluginOptions );\n\n\t/**\n\t * Creates an enhanced store dispatch function, triggering the state of the\n\t * given reducer key to be persisted when changed.\n\t *\n\t * @param {Function}       getState   Function which returns current state.\n\t * @param {string}         reducerKey Reducer key.\n\t * @param {?Array<string>} keys       Optional subset of keys to save.\n\t *\n\t * @return {Function} Enhanced dispatch function.\n\t */\n\tfunction createPersistOnChange( getState, reducerKey, keys ) {\n\t\tlet lastState = getState();\n\n\t\treturn ( result ) => {\n\t\t\tlet state = getState();\n\t\t\tif ( state !== lastState ) {\n\t\t\t\tif ( Array.isArray( keys ) ) {\n\t\t\t\t\tstate = pick( state, keys );\n\t\t\t\t}\n\n\t\t\t\tpersistence.set( reducerKey, state );\n\t\t\t\tlastState = state;\n\t\t\t}\n\n\t\t\treturn result;\n\t\t};\n\t}\n\n\treturn {\n\t\tregisterStore( reducerKey, options ) {\n\t\t\tif ( ! options.persist ) {\n\t\t\t\treturn registry.registerStore( reducerKey, options );\n\t\t\t}\n\n\t\t\tconst initialState = persistence.get()[ reducerKey ];\n\n\t\t\toptions = {\n\t\t\t\t...options,\n\t\t\t\treducer: withInitialState( options.reducer, initialState ),\n\t\t\t};\n\n\t\t\tconst store = registry.registerStore( reducerKey, options );\n\n\t\t\tstore.dispatch = flow( [\n\t\t\t\tstore.dispatch,\n\t\t\t\tcreatePersistOnChange(\n\t\t\t\t\tstore.getState,\n\t\t\t\t\treducerKey,\n\t\t\t\t\toptions.persist\n\t\t\t\t),\n\t\t\t] );\n\n\t\t\treturn store;\n\t\t},\n\t};\n}\n"]}