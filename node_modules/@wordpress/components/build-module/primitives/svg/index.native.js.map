{"version":3,"sources":["/Users/riad/Workspace/a8c/gutenberg/packages/components/src/primitives/svg/index.native.js"],"names":["Svg","styles","Circle","G","Path","Polygon","Rect","SVG","props","styleValues","style","oneStyle","split","map","element","filter","Boolean","Object","assign","safeProps","color"],"mappings":";;;;;AAAA;;;AAGA,SAASA,GAAT,QAAoB,kBAApB;AAEA;;;;AAGA,OAAOC,MAAP,MAAmB,cAAnB;AAEA,SACCC,MADD,EAECC,CAFD,EAGCC,IAHD,EAICC,OAJD,EAKCC,IALD,QAMO,kBANP;AAQA,OAAO,IAAMC,GAAG,GAAG,SAANA,GAAM,CAAEC,KAAF,EAAa;AAC/B;AACA;AACA;AAEA,MAAIC,WAAW,GAAG,EAAlB;;AACA,MAAK,OAAOD,KAAK,CAACE,KAAb,KAAuB,QAA5B,EAAuC;AACtC,QAAMC,QAAQ,GAAGH,KAAK,CAACE,KAAN,CAAYE,KAAZ,CAAmB,GAAnB,EAAyBC,GAAzB,CAA8B,UAAEC,OAAF;AAAA,aAAeb,MAAM,CAAEa,OAAF,CAArB;AAAA,KAA9B,EAAiEC,MAAjE,CAAyEC,OAAzE,CAAjB;AACAP,IAAAA,WAAW,GAAGQ,MAAM,CAACC,MAAP,OAAAD,MAAM,GAASR,WAAT,4BAAyBE,QAAzB,GAApB;AACA;;AAED,MAAMQ,SAAS,qBAAQX,KAAR;AAAeE,IAAAA,KAAK,EAAED;AAAtB,IAAf;;AAEA,SACC,cAAC,GAAD,CACC;AADD;AAEC,IAAA,GAAG,EAAGU,SAAS,CAACT,KAAV,CAAgBU,KAFvB;AAGC,IAAA,MAAM,EAAC,MAHR;AAIC,IAAA,KAAK,EAAC;AAJP,KAKMD,SALN,EADD;AASA,CAtBM","sourcesContent":["/**\n * External dependencies\n */\nimport { Svg } from 'react-native-svg';\n\n/**\n * Internal dependencies\n */\nimport styles from './style.scss';\n\nexport {\n\tCircle,\n\tG,\n\tPath,\n\tPolygon,\n\tRect,\n} from 'react-native-svg';\n\nexport const SVG = ( props ) => {\n\t// We're using the react-native-classname-to-style plugin, so when a `className` prop is passed it gets converted to `style` here.\n\t// Given it carries a string (as it was originally className) but an object is expected for `style`,\n\t// we need to check whether `style` exists and is a string, and convert it to an object\n\n\tlet styleValues = {};\n\tif ( typeof props.style === 'string' ) {\n\t\tconst oneStyle = props.style.split( ' ' ).map( ( element ) => styles[ element ] ).filter( Boolean );\n\t\tstyleValues = Object.assign( styleValues, ...oneStyle );\n\t}\n\n\tconst safeProps = { ...props, style: styleValues };\n\n\treturn (\n\t\t<Svg\n\t\t\t//We want to re-render when style color is changed\n\t\t\tkey={ safeProps.style.color }\n\t\t\theight=\"100%\"\n\t\t\twidth=\"100%\"\n\t\t\t{ ...safeProps }\n\t\t/>\n\t);\n};\n\n"]}