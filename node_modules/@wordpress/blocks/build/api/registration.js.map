{"version":3,"sources":["/Users/riad/Workspace/a8c/gutenberg/packages/blocks/src/api/registration.js"],"names":["serverSideBlockDefinitions","unstable__bootstrapServerSideBlockDefinitions","definitions","registerBlockType","name","settings","console","error","test","getBlockType","save","edit","keywords","length","getCategories","slug","category","title","icon","src","addBlockTypes","unregisterBlockType","oldBlock","removeBlockTypes","setFreeformContentHandlerName","blockName","setFreeformFallbackBlockName","getFreeformContentHandlerName","getFreeformFallbackBlockName","setUnregisteredTypeHandlerName","setUnregisteredFallbackBlockName","getUnregisteredTypeHandlerName","getUnregisteredFallbackBlockName","setDefaultBlockName","getDefaultBlockName","getBlockTypes","getBlockSupport","nameOrType","feature","defaultSupports","hasBlockSupport","isReusableBlock","blockOrType","getChildBlockNames","hasChildBlocks","hasChildBlocksWithInserterSupport","registerBlockStyle","styleVariation","addBlockStyles","unregisterBlockStyle","styleVariationName","removeBlockStyles"],"mappings":"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","sourcesContent":["/* eslint no-console: [ 'error', { allow: [ 'error' ] } ] */\n\n/**\n * External dependencies\n */\nimport { get, isFunction, some } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { applyFilters } from '@wordpress/hooks';\nimport { select, dispatch } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport { isValidIcon, normalizeIconObject } from './utils';\n\n/**\n * Defined behavior of a block type.\n *\n * @typedef {WPBlockType}\n *\n * @property {string}                    name       Block's namespaced name.\n * @property {string}                    title      Human-readable label for a block.\n *                                                  Shown in the block inserter.\n * @property {string}                    category   Category classification of block,\n *                                                  impacting where block is shown in\n *                                                  inserter results.\n * @property {(Object|string|WPElement)} icon       Slug of the Dashicon to be shown\n *                                                  as the icon for the block in the\n *                                                  inserter, or element or an object describing the icon.\n * @property {?string[]}                 keywords   Additional keywords to produce\n *                                                  block as inserter search result.\n * @property {?Object}                   attributes Block attributes.\n * @property {Function}                  save       Serialize behavior of a block,\n *                                                  returning an element describing\n *                                                  structure of the block's post\n *                                                  content markup.\n * @property {WPComponent}               edit       Component rendering element to be\n *                                                  interacted with in an editor.\n */\n\nlet serverSideBlockDefinitions = {};\n\n/**\n * Set the server side block definition of blocks.\n *\n * @param {Object} definitions Server-side block definitions\n */\nexport function unstable__bootstrapServerSideBlockDefinitions( definitions ) { // eslint-disable-line camelcase\n\tserverSideBlockDefinitions = definitions;\n}\n\n/**\n * Registers a new block provided a unique name and an object defining its\n * behavior. Once registered, the block is made available as an option to any\n * editor interface where blocks are implemented.\n *\n * @param {string} name     Block name.\n * @param {Object} settings Block settings.\n *\n * @return {?WPBlock} The block, if it has been successfully registered;\n *                     otherwise `undefined`.\n */\nexport function registerBlockType( name, settings ) {\n\tsettings = {\n\t\tname,\n\t\t...get( serverSideBlockDefinitions, name ),\n\t\t...settings,\n\t};\n\n\tif ( typeof name !== 'string' ) {\n\t\tconsole.error(\n\t\t\t'Block names must be strings.'\n\t\t);\n\t\treturn;\n\t}\n\tif ( ! /^[a-z][a-z0-9-]*\\/[a-z][a-z0-9-]*$/.test( name ) ) {\n\t\tconsole.error(\n\t\t\t'Block names must contain a namespace prefix, include only lowercase alphanumeric characters or dashes, and start with a letter. Example: my-plugin/my-custom-block'\n\t\t);\n\t\treturn;\n\t}\n\tif ( select( 'core/blocks' ).getBlockType( name ) ) {\n\t\tconsole.error(\n\t\t\t'Block \"' + name + '\" is already registered.'\n\t\t);\n\t\treturn;\n\t}\n\n\tsettings = applyFilters( 'blocks.registerBlockType', settings, name );\n\n\tif ( ! settings || ! isFunction( settings.save ) ) {\n\t\tconsole.error(\n\t\t\t'The \"save\" property must be specified and must be a valid function.'\n\t\t);\n\t\treturn;\n\t}\n\tif ( 'edit' in settings && ! isFunction( settings.edit ) ) {\n\t\tconsole.error(\n\t\t\t'The \"edit\" property must be a valid function.'\n\t\t);\n\t\treturn;\n\t}\n\tif ( 'keywords' in settings && settings.keywords.length > 3 ) {\n\t\tconsole.error(\n\t\t\t'The block \"' + name + '\" can have a maximum of 3 keywords.'\n\t\t);\n\t\treturn;\n\t}\n\tif ( ! ( 'category' in settings ) ) {\n\t\tconsole.error(\n\t\t\t'The block \"' + name + '\" must have a category.'\n\t\t);\n\t\treturn;\n\t}\n\tif (\n\t\t'category' in settings &&\n\t\t! some( select( 'core/blocks' ).getCategories(), { slug: settings.category } )\n\t) {\n\t\tconsole.error(\n\t\t\t'The block \"' + name + '\" must have a registered category.'\n\t\t);\n\t\treturn;\n\t}\n\tif ( ! ( 'title' in settings ) || settings.title === '' ) {\n\t\tconsole.error(\n\t\t\t'The block \"' + name + '\" must have a title.'\n\t\t);\n\t\treturn;\n\t}\n\tif ( typeof settings.title !== 'string' ) {\n\t\tconsole.error(\n\t\t\t'Block titles must be strings.'\n\t\t);\n\t\treturn;\n\t}\n\n\tsettings.icon = normalizeIconObject( settings.icon );\n\tif ( ! isValidIcon( settings.icon.src ) ) {\n\t\tconsole.error(\n\t\t\t'The icon passed is invalid. ' +\n\t\t\t'The icon should be a string, an element, a function, or an object following the specifications documented in https://wordpress.org/gutenberg/handbook/block-api/#icon-optional'\n\t\t);\n\t\treturn;\n\t}\n\n\tdispatch( 'core/blocks' ).addBlockTypes( settings );\n\n\treturn settings;\n}\n\n/**\n * Unregisters a block.\n *\n * @param {string} name Block name.\n *\n * @return {?WPBlock} The previous block value, if it has been successfully\n *                     unregistered; otherwise `undefined`.\n */\nexport function unregisterBlockType( name ) {\n\tconst oldBlock = select( 'core/blocks' ).getBlockType( name );\n\tif ( ! oldBlock ) {\n\t\tconsole.error(\n\t\t\t'Block \"' + name + '\" is not registered.'\n\t\t);\n\t\treturn;\n\t}\n\tdispatch( 'core/blocks' ).removeBlockTypes( name );\n\treturn oldBlock;\n}\n\n/**\n * Assigns name of block for handling non-block content.\n *\n * @param {string} blockName Block name.\n */\nexport function setFreeformContentHandlerName( blockName ) {\n\tdispatch( 'core/blocks' ).setFreeformFallbackBlockName( blockName );\n}\n\n/**\n * Retrieves name of block handling non-block content, or undefined if no\n * handler has been defined.\n *\n * @return {?string} Blog name.\n */\nexport function getFreeformContentHandlerName() {\n\treturn select( 'core/blocks' ).getFreeformFallbackBlockName();\n}\n\n/**\n * Assigns name of block handling unregistered block types.\n *\n * @param {string} blockName Block name.\n */\nexport function setUnregisteredTypeHandlerName( blockName ) {\n\tdispatch( 'core/blocks' ).setUnregisteredFallbackBlockName( blockName );\n}\n\n/**\n * Retrieves name of block handling unregistered block types, or undefined if no\n * handler has been defined.\n *\n * @return {?string} Blog name.\n */\nexport function getUnregisteredTypeHandlerName() {\n\treturn select( 'core/blocks' ).getUnregisteredFallbackBlockName();\n}\n\n/**\n * Assigns the default block name.\n *\n * @param {string} name Block name.\n */\nexport function setDefaultBlockName( name ) {\n\tdispatch( 'core/blocks' ).setDefaultBlockName( name );\n}\n\n/**\n * Retrieves the default block name.\n *\n * @return {?string} Block name.\n */\nexport function getDefaultBlockName() {\n\treturn select( 'core/blocks' ).getDefaultBlockName();\n}\n\n/**\n * Returns a registered block type.\n *\n * @param {string} name Block name.\n *\n * @return {?Object} Block type.\n */\nexport function getBlockType( name ) {\n\treturn select( 'core/blocks' ).getBlockType( name );\n}\n\n/**\n * Returns all registered blocks.\n *\n * @return {Array} Block settings.\n */\nexport function getBlockTypes() {\n\treturn select( 'core/blocks' ).getBlockTypes();\n}\n\n/**\n * Returns the block support value for a feature, if defined.\n *\n * @param  {(string|Object)} nameOrType      Block name or type object\n * @param  {string}          feature         Feature to retrieve\n * @param  {*}               defaultSupports Default value to return if not\n *                                           explicitly defined\n *\n * @return {?*} Block support value\n */\nexport function getBlockSupport( nameOrType, feature, defaultSupports ) {\n\treturn select( 'core/blocks' ).getBlockSupport( nameOrType, feature, defaultSupports );\n}\n\n/**\n * Returns true if the block defines support for a feature, or false otherwise.\n *\n * @param {(string|Object)} nameOrType      Block name or type object.\n * @param {string}          feature         Feature to test.\n * @param {boolean}         defaultSupports Whether feature is supported by\n *                                          default if not explicitly defined.\n *\n * @return {boolean} Whether block supports feature.\n */\nexport function hasBlockSupport( nameOrType, feature, defaultSupports ) {\n\treturn select( 'core/blocks' ).hasBlockSupport( nameOrType, feature, defaultSupports );\n}\n\n/**\n * Determines whether or not the given block is a reusable block. This is a\n * special block type that is used to point to a global block stored via the\n * API.\n *\n * @param {Object} blockOrType Block or Block Type to test.\n *\n * @return {boolean} Whether the given block is a reusable block.\n */\nexport function isReusableBlock( blockOrType ) {\n\treturn blockOrType.name === 'core/block';\n}\n\n/**\n * Returns an array with the child blocks of a given block.\n *\n * @param {string} blockName Name of block (example: “latest-posts”).\n *\n * @return {Array} Array of child block names.\n */\nexport const getChildBlockNames = ( blockName ) => {\n\treturn select( 'core/blocks' ).getChildBlockNames( blockName );\n};\n\n/**\n * Returns a boolean indicating if a block has child blocks or not.\n *\n * @param {string} blockName Name of block (example: “latest-posts”).\n *\n * @return {boolean} True if a block contains child blocks and false otherwise.\n */\nexport const hasChildBlocks = ( blockName ) => {\n\treturn select( 'core/blocks' ).hasChildBlocks( blockName );\n};\n\n/**\n * Returns a boolean indicating if a block has at least one child block with inserter support.\n *\n * @param {string} blockName Block type name.\n *\n * @return {boolean} True if a block contains at least one child blocks with inserter support\n *                   and false otherwise.\n */\nexport const hasChildBlocksWithInserterSupport = ( blockName ) => {\n\treturn select( 'core/blocks' ).hasChildBlocksWithInserterSupport( blockName );\n};\n\n/**\n * Registers a new block style variation for the given block.\n *\n * @param {string} blockName      Name of block (example: “core/latest-posts”).\n * @param {Object} styleVariation Object containing `name` which is the class name applied to the block and `label` which identifies the variation to the user.\n */\nexport const registerBlockStyle = ( blockName, styleVariation ) => {\n\tdispatch( 'core/blocks' ).addBlockStyles( blockName, styleVariation );\n};\n\n/**\n * Unregisters a block style variation for the given block.\n *\n * @param {string} blockName          Name of block (example: “core/latest-posts”).\n * @param {string} styleVariationName Name of class applied to the block.\n */\nexport const unregisterBlockStyle = ( blockName, styleVariationName ) => {\n\tdispatch( 'core/blocks' ).removeBlockStyles( blockName, styleVariationName );\n};\n"]}