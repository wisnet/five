{"version":3,"sources":["/Users/riad/Workspace/a8c/gutenberg/packages/components/src/toolbar/index.js"],"names":["Toolbar","controls","children","className","isCollapsed","icon","label","length","controlSets","Array","isArray","controlSet","indexOfSet","map","control","indexOfControl","join"],"mappings":";;;;;;;;;;;;;AAGA;;AACA;;AAKA;;AACA;;AACA;;AAXA;;;;AAMA;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA,SAASA,OAAT,OAAqF;AAAA,2BAAjEC,QAAiE;AAAA,MAAjEA,QAAiE,8BAAtD,EAAsD;AAAA,MAAlDC,QAAkD,QAAlDA,QAAkD;AAAA,MAAxCC,SAAwC,QAAxCA,SAAwC;AAAA,MAA7BC,WAA6B,QAA7BA,WAA6B;AAAA,MAAhBC,IAAgB,QAAhBA,IAAgB;AAAA,MAAVC,KAAU,QAAVA,KAAU;;AACpF,MACC,CAAE,CAAEL,QAAF,IAAc,CAAEA,QAAQ,CAACM,MAA3B,KACA,CAAEL,QAFH,EAGE;AACD,WAAO,IAAP;AACA,GANmF,CAQpF;;;AACA,MAAIM,WAAW,GAAGP,QAAlB;;AACA,MAAK,CAAEQ,KAAK,CAACC,OAAN,CAAeF,WAAW,CAAE,CAAF,CAA1B,CAAP,EAA2C;AAC1CA,IAAAA,WAAW,GAAG,CAAEA,WAAF,CAAd;AACA;;AAED,MAAKJ,WAAL,EAAmB;AAClB,WACC,4BAAC,qBAAD;AACC,MAAA,IAAI,EAAGC,IADR;AAEC,MAAA,KAAK,EAAGC,KAFT;AAGC,MAAA,QAAQ,EAAGE,WAHZ;AAIC,MAAA,SAAS,EAAG,yBAAY,oBAAZ,EAAkCL,SAAlC;AAJb,MADD;AAQA;;AAED,SACC,4BAAC,yBAAD;AAAkB,IAAA,SAAS,EAAG,yBAAY,oBAAZ,EAAkCA,SAAlC;AAA9B,KACG,qBAASK,WAAT,EAAsB,UAAEG,UAAF,EAAcC,UAAd;AAAA,WACvBD,UAAU,CAACE,GAAX,CAAgB,UAAEC,OAAF,EAAWC,cAAX;AAAA,aACf,4BAAC,sBAAD;AACC,QAAA,GAAG,EAAG,CAAEH,UAAF,EAAcG,cAAd,EAA+BC,IAA/B,EADP;AAEC,QAAA,kBAAkB,EAAGJ,UAAU,GAAG,CAAb,IAAkBG,cAAc,KAAK,CAArC,GAAyC,kBAAzC,GAA8D;AAFpF,SAGMD,OAHN,EADe;AAAA,KAAhB,CADuB;AAAA,GAAtB,CADH,EAUGZ,QAVH,CADD;AAcA;;eAEcF,O","sourcesContent":["/**\n * External dependencies\n */\nimport classnames from 'classnames';\nimport { flatMap } from 'lodash';\n\n/**\n * Internal dependencies\n */\nimport ToolbarButton from '../toolbar-button';\nimport DropdownMenu from '../dropdown-menu';\nimport ToolbarContainer from './toolbar-container';\n\n/**\n * Renders a toolbar with controls.\n *\n * The `controls` prop accepts an array of sets. A set is an array of controls.\n * Controls have the following shape:\n *\n * ```\n * {\n *   icon: string,\n *   title: string,\n *   subscript: string,\n *   onClick: Function,\n *   isActive: boolean,\n *   isDisabled: boolean\n * }\n * ```\n *\n * For convenience it is also possible to pass only an array of controls. It is\n * then assumed this is the only set.\n *\n * Either `controls` or `children` is required, otherwise this components\n * renders nothing.\n *\n * @param {?Array}        controls  The controls to render in this toolbar.\n * @param {?ReactElement} children  Any other things to render inside the\n *                                  toolbar besides the controls.\n * @param {?string}       className Class to set on the container div.\n *\n * @return {ReactElement} The rendered toolbar.\n */\nfunction Toolbar( { controls = [], children, className, isCollapsed, icon, label } ) {\n\tif (\n\t\t( ! controls || ! controls.length ) &&\n\t\t! children\n\t) {\n\t\treturn null;\n\t}\n\n\t// Normalize controls to nested array of objects (sets of controls)\n\tlet controlSets = controls;\n\tif ( ! Array.isArray( controlSets[ 0 ] ) ) {\n\t\tcontrolSets = [ controlSets ];\n\t}\n\n\tif ( isCollapsed ) {\n\t\treturn (\n\t\t\t<DropdownMenu\n\t\t\t\ticon={ icon }\n\t\t\t\tlabel={ label }\n\t\t\t\tcontrols={ controlSets }\n\t\t\t\tclassName={ classnames( 'components-toolbar', className ) }\n\t\t\t/>\n\t\t);\n\t}\n\n\treturn (\n\t\t<ToolbarContainer className={ classnames( 'components-toolbar', className ) }>\n\t\t\t{ flatMap( controlSets, ( controlSet, indexOfSet ) => (\n\t\t\t\tcontrolSet.map( ( control, indexOfControl ) => (\n\t\t\t\t\t<ToolbarButton\n\t\t\t\t\t\tkey={ [ indexOfSet, indexOfControl ].join() }\n\t\t\t\t\t\tcontainerClassName={ indexOfSet > 0 && indexOfControl === 0 ? 'has-left-divider' : null }\n\t\t\t\t\t\t{ ...control }\n\t\t\t\t\t/>\n\t\t\t\t) )\n\t\t\t) ) }\n\t\t\t{ children }\n\t\t</ToolbarContainer>\n\t);\n}\n\nexport default Toolbar;\n"]}