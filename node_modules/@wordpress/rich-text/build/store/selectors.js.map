{"version":3,"sources":["/Users/riad/Workspace/a8c/gutenberg/packages/rich-text/src/store/selectors.js"],"names":["getFormatTypes","state","Object","values","formatTypes","getFormatType","name","getFormatTypeForBareElement","bareElementTagName","tagName","getFormatTypeForClassName","elementClassName","className","indexOf"],"mappings":";;;;;;;;;;;;AAGA;;AACA;;AAJA;;;;AAMA;;;;;;;AAOO,IAAMA,cAAc,GAAG,qBAC7B,UAAEC,KAAF;AAAA,SAAaC,MAAM,CAACC,MAAP,CAAeF,KAAK,CAACG,WAArB,CAAb;AAAA,CAD6B,EAE7B,UAAEH,KAAF;AAAA,SAAa,CACZA,KAAK,CAACG,WADM,CAAb;AAAA,CAF6B,CAAvB;AAOP;;;;;;;;;;;AAQO,SAASC,aAAT,CAAwBJ,KAAxB,EAA+BK,IAA/B,EAAsC;AAC5C,SAAOL,KAAK,CAACG,WAAN,CAAmBE,IAAnB,CAAP;AACA;AAED;;;;;;;;;;;AASO,SAASC,2BAAT,CAAsCN,KAAtC,EAA6CO,kBAA7C,EAAkE;AACxE,SAAO,kBAAMR,cAAc,CAAEC,KAAF,CAApB,EAA+B,gBAAmB;AAAA,QAAfQ,OAAe,QAAfA,OAAe;AACxD,WAAOD,kBAAkB,KAAKC,OAA9B;AACA,GAFM,CAAP;AAGA;AAED;;;;;;;;;;AAQO,SAASC,yBAAT,CAAoCT,KAApC,EAA2CU,gBAA3C,EAA8D;AACpE,SAAO,kBAAMX,cAAc,CAAEC,KAAF,CAApB,EAA+B,iBAAqB;AAAA,QAAjBW,SAAiB,SAAjBA,SAAiB;;AAC1D,QAAKA,SAAS,KAAK,IAAnB,EAA0B;AACzB,aAAO,KAAP;AACA;;AAED,WAAO,WAAKD,gBAAL,OAA0BE,OAA1B,YAAwCD,SAAxC,WAA2D,CAAlE;AACA,GANM,CAAP;AAOA","sourcesContent":["/**\n * External dependencies\n */\nimport createSelector from 'rememo';\nimport { find } from 'lodash';\n\n/**\n * Returns all the available format types.\n *\n * @param {Object} state Data state.\n *\n * @return {Array} Format types.\n */\nexport const getFormatTypes = createSelector(\n\t( state ) => Object.values( state.formatTypes ),\n\t( state ) => [\n\t\tstate.formatTypes,\n\t]\n);\n\n/**\n * Returns a format type by name.\n *\n * @param {Object} state Data state.\n * @param {string} name Format type name.\n *\n * @return {Object?} Format type.\n */\nexport function getFormatType( state, name ) {\n\treturn state.formatTypes[ name ];\n}\n\n/**\n * Gets the format type, if any, that can handle a bare element (without a\n * data-format-type attribute), given the tag name of this element.\n *\n * @param {Object} state              Data state.\n * @param {string} bareElementTagName The tag name of the element to find a\n *                                    format type for.\n * @return {?Object} Format type.\n */\nexport function getFormatTypeForBareElement( state, bareElementTagName ) {\n\treturn find( getFormatTypes( state ), ( { tagName } ) => {\n\t\treturn bareElementTagName === tagName;\n\t} );\n}\n\n/**\n * Gets the format type, if any, that can handle an element, given its classes.\n *\n * @param {Object} state            Data state.\n * @param {string} elementClassName The classes of the element to find a format\n *                                  type for.\n * @return {?Object} Format type.\n */\nexport function getFormatTypeForClassName( state, elementClassName ) {\n\treturn find( getFormatTypes( state ), ( { className } ) => {\n\t\tif ( className === null ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn ` ${ elementClassName } `.indexOf( ` ${ className } ` ) >= 0;\n\t} );\n}\n"]}