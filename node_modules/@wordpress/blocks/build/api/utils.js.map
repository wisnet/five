{"version":3,"sources":["/Users/riad/Workspace/a8c/gutenberg/packages/blocks/src/api/utils.js"],"names":["ICON_COLORS","isUnmodifiedDefaultBlock","block","defaultBlockName","name","newDefaultBlock","blockType","attributes","value","key","isValidIcon","icon","Component","normalizeIconObject","src","tinyBgColor","background","foreground","includeFallbackColors","level","size","toHexString","shadowColor","setAlpha","toRgbString","normalizeBlockType","blockTypeOrName"],"mappings":";;;;;;;;;;;;;;;;AAGA;;AACA;;AAKA;;AAKA;;AACA;;AAfA;;;;AAMA;;;;AAKA;;;;AAMA;;;;;;AAMA,IAAMA,WAAW,GAAG,CAAE,SAAF,EAAa,SAAb,CAApB;AAEA;;;;;;;;;;AASO,SAASC,wBAAT,CAAmCC,KAAnC,EAA2C;AACjD,MAAMC,gBAAgB,GAAG,wCAAzB;;AACA,MAAKD,KAAK,CAACE,IAAN,KAAeD,gBAApB,EAAuC;AACtC,WAAO,KAAP;AACA,GAJgD,CAMjD;AACA;;;AACA,MACC,CAAEF,wBAAwB,CAACC,KAA3B,IACAD,wBAAwB,CAACC,KAAzB,CAA+BE,IAA/B,KAAwCD,gBAFzC,EAGE;AACDF,IAAAA,wBAAwB,CAACC,KAAzB,GAAiC,0BAAaC,gBAAb,CAAjC;AACA;;AAED,MAAME,eAAe,GAAGJ,wBAAwB,CAACC,KAAjD;AACA,MAAMI,SAAS,GAAG,gCAAcH,gBAAd,CAAlB;AAEA,SAAO,mBAAOG,SAAS,CAACC,UAAjB,EAA6B,UAAEC,KAAF,EAASC,GAAT;AAAA,WACnCJ,eAAe,CAACE,UAAhB,CAA4BE,GAA5B,MAAsCP,KAAK,CAACK,UAAN,CAAkBE,GAAlB,CADH;AAAA,GAA7B,CAAP;AAGA;AAED;;;;;;;;;AAQO,SAASC,WAAT,CAAsBC,IAAtB,EAA6B;AACnC,SAAO,CAAC,CAAEA,IAAH,KACN,sBAAUA,IAAV,KACA,6BAAgBA,IAAhB,CADA,IAEA,wBAAYA,IAAZ,CAFA,IAGAA,IAAI,YAAYC,kBAJV,CAAP;AAMA;AAED;;;;;;;;;;;;;AAWO,SAASC,mBAAT,CAA8BF,IAA9B,EAAqC;AAC3C,MAAK,CAAEA,IAAP,EAAc;AACbA,IAAAA,IAAI,GAAG,eAAP;AACA;;AAED,MAAKD,WAAW,CAAEC,IAAF,CAAhB,EAA2B;AAC1B,WAAO;AAAEG,MAAAA,GAAG,EAAEH;AAAP,KAAP;AACA;;AAED,MAAK,iBAAKA,IAAL,EAAW,CAAE,YAAF,CAAX,CAAL,EAAqC;AACpC,QAAMI,WAAW,GAAG,wBAAWJ,IAAI,CAACK,UAAhB,CAApB;AAEA,2CACIL,IADJ;AAECM,MAAAA,UAAU,EAAEN,IAAI,CAACM,UAAL,GAAkBN,IAAI,CAACM,UAAvB,GAAoC,6BAC/CF,WAD+C,EAE/Cf,WAF+C,EAG/C;AAAEkB,QAAAA,qBAAqB,EAAE,IAAzB;AAA+BC,QAAAA,KAAK,EAAE,IAAtC;AAA4CC,QAAAA,IAAI,EAAE;AAAlD,OAH+C,EAI9CC,WAJ8C,EAFjD;AAOCC,MAAAA,WAAW,EAAEP,WAAW,CAACQ,QAAZ,CAAsB,GAAtB,EAA4BC,WAA5B;AAPd;AASA;;AAED,SAAOb,IAAP;AACA;AAED;;;;;;;;;;;AASO,SAASc,kBAAT,CAA6BC,eAA7B,EAA+C;AACrD,MAAK,sBAAUA,eAAV,CAAL,EAAmC;AAClC,WAAO,gCAAcA,eAAd,CAAP;AACA;;AAED,SAAOA,eAAP;AACA","sourcesContent":["/**\n * External dependencies\n */\nimport { every, has, isFunction, isString } from 'lodash';\nimport { default as tinycolor, mostReadable } from 'tinycolor2';\n\n/**\n * WordPress dependencies\n */\nimport { Component, isValidElement } from '@wordpress/element';\n\n/**\n * Internal dependencies\n */\nimport { getBlockType, getDefaultBlockName } from './registration';\nimport { createBlock } from './factory';\n\n/**\n * Array of icon colors containing a color to be used if the icon color\n * was not explicitly set but the icon background color was.\n *\n * @type {Object}\n */\nconst ICON_COLORS = [ '#191e23', '#f8f9f9' ];\n\n/**\n * Determines whether the block is a default block\n * and its attributes are equal to the default attributes\n * which means the block is unmodified.\n *\n * @param  {WPBlock} block Block Object\n *\n * @return {boolean}       Whether the block is an unmodified default block\n */\nexport function isUnmodifiedDefaultBlock( block ) {\n\tconst defaultBlockName = getDefaultBlockName();\n\tif ( block.name !== defaultBlockName ) {\n\t\treturn false;\n\t}\n\n\t// Cache a created default block if no cache exists or the default block\n\t// name changed.\n\tif (\n\t\t! isUnmodifiedDefaultBlock.block ||\n\t\tisUnmodifiedDefaultBlock.block.name !== defaultBlockName\n\t) {\n\t\tisUnmodifiedDefaultBlock.block = createBlock( defaultBlockName );\n\t}\n\n\tconst newDefaultBlock = isUnmodifiedDefaultBlock.block;\n\tconst blockType = getBlockType( defaultBlockName );\n\n\treturn every( blockType.attributes, ( value, key ) =>\n\t\tnewDefaultBlock.attributes[ key ] === block.attributes[ key ]\n\t);\n}\n\n/**\n * Function that checks if the parameter is a valid icon.\n *\n * @param {*} icon  Parameter to be checked.\n *\n * @return {boolean} True if the parameter is a valid icon and false otherwise.\n */\n\nexport function isValidIcon( icon ) {\n\treturn !! icon && (\n\t\tisString( icon ) ||\n\t\tisValidElement( icon ) ||\n\t\tisFunction( icon ) ||\n\t\ticon instanceof Component\n\t);\n}\n\n/**\n * Function that receives an icon as set by the blocks during the registration\n * and returns a new icon object that is normalized so we can rely on just on possible icon structure\n * in the codebase.\n *\n * @param {(Object|string|WPElement)} icon  Slug of the Dashicon to be shown\n *                                          as the icon for the block in the\n *                                          inserter, or element or an object describing the icon.\n *\n * @return {Object} Object describing the icon.\n */\nexport function normalizeIconObject( icon ) {\n\tif ( ! icon ) {\n\t\ticon = 'block-default';\n\t}\n\n\tif ( isValidIcon( icon ) ) {\n\t\treturn { src: icon };\n\t}\n\n\tif ( has( icon, [ 'background' ] ) ) {\n\t\tconst tinyBgColor = tinycolor( icon.background );\n\n\t\treturn {\n\t\t\t...icon,\n\t\t\tforeground: icon.foreground ? icon.foreground : mostReadable(\n\t\t\t\ttinyBgColor,\n\t\t\t\tICON_COLORS,\n\t\t\t\t{ includeFallbackColors: true, level: 'AA', size: 'large' }\n\t\t\t).toHexString(),\n\t\t\tshadowColor: tinyBgColor.setAlpha( 0.3 ).toRgbString(),\n\t\t};\n\t}\n\n\treturn icon;\n}\n\n/**\n * Normalizes block type passed as param. When string is passed then\n * it converts it to the matching block type object.\n * It passes the original object otherwise.\n *\n * @param {string|Object} blockTypeOrName  Block type or name.\n *\n * @return {?Object} Block type.\n */\nexport function normalizeBlockType( blockTypeOrName ) {\n\tif ( isString( blockTypeOrName ) ) {\n\t\treturn getBlockType( blockTypeOrName );\n\t}\n\n\treturn blockTypeOrName;\n}\n"]}