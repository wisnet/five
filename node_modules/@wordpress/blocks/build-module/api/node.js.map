{"version":3,"sources":["/Users/riad/Workspace/a8c/gutenberg/packages/blocks/src/api/node.js"],"names":["children","window","Node","TEXT_NODE","ELEMENT_NODE","isNodeOfType","node","type","getNamedNodeMapAsObject","nodeMap","result","i","length","name","value","fromDOM","domNode","nodeType","nodeValue","TypeError","nodeName","toLowerCase","props","attributes","childNodes","toHTML","matcher","selector","match","querySelector","error"],"mappings":";;AAAA;;;AAGA,OAAO,KAAKA,QAAZ,MAA0B,YAA1B;AAEA;;;;mBAGoCC,MAAM,CAACC,I;IAAnCC,S,gBAAAA,S;IAAWC,Y,gBAAAA,Y;AAEnB;;;;;;;;;;;AAWA;;;;;;;;;;AASA,SAASC,YAAT,CAAuBC,IAAvB,EAA6BC,IAA7B,EAAoC;AACnC,SAAOD,IAAI,IAAIA,IAAI,CAACC,IAAL,KAAcA,IAA7B;AACA;AAED;;;;;;;;;;;;AAUA,OAAO,SAASC,uBAAT,CAAkCC,OAAlC,EAA4C;AAClD,MAAMC,MAAM,GAAG,EAAf;;AACA,OAAM,IAAIC,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAGF,OAAO,CAACG,MAA7B,EAAqCD,CAAC,EAAtC,EAA2C;AAAA,qBAClBF,OAAO,CAAEE,CAAF,CADW;AAAA,QAClCE,IADkC,cAClCA,IADkC;AAAA,QAC5BC,KAD4B,cAC5BA,KAD4B;AAE1CJ,IAAAA,MAAM,CAAEG,IAAF,CAAN,GAAiBC,KAAjB;AACA;;AAED,SAAOJ,MAAP;AACA;AAED;;;;;;;;;;;AAUA,OAAO,SAASK,OAAT,CAAkBC,OAAlB,EAA4B;AAClC,MAAKA,OAAO,CAACC,QAAR,KAAqBd,SAA1B,EAAsC;AACrC,WAAOa,OAAO,CAACE,SAAf;AACA;;AAED,MAAKF,OAAO,CAACC,QAAR,KAAqBb,YAA1B,EAAyC;AACxC,UAAM,IAAIe,SAAJ,CACL,kEACA,UAFK,CAAN;AAIA;;AAED,SAAO;AACNZ,IAAAA,IAAI,EAAES,OAAO,CAACI,QAAR,CAAiBC,WAAjB,EADA;AAENC,IAAAA,KAAK,oBACDd,uBAAuB,CAAEQ,OAAO,CAACO,UAAV,CADtB;AAEJvB,MAAAA,QAAQ,EAAEA,QAAQ,CAACe,OAAT,CAAkBC,OAAO,CAACQ,UAA1B;AAFN;AAFC,GAAP;AAOA;AAED;;;;;;;;AAOA,OAAO,SAASC,MAAT,CAAiBnB,IAAjB,EAAwB;AAC9B,SAAON,QAAQ,CAACyB,MAAT,CAAiB,CAAEnB,IAAF,CAAjB,CAAP;AACA;AAED;;;;;;;;;AAQA,OAAO,SAASoB,OAAT,CAAkBC,QAAlB,EAA6B;AACnC,SAAO,UAAEX,OAAF,EAAe;AACrB,QAAIY,KAAK,GAAGZ,OAAZ;;AAEA,QAAKW,QAAL,EAAgB;AACfC,MAAAA,KAAK,GAAGZ,OAAO,CAACa,aAAR,CAAuBF,QAAvB,CAAR;AACA;;AAED,QAAI;AACH,aAAOZ,OAAO,CAAEa,KAAF,CAAd;AACA,KAFD,CAEE,OAAQE,KAAR,EAAgB;AACjB,aAAO,IAAP;AACA;AACD,GAZD;AAaA;AAED,eAAe;AACdzB,EAAAA,YAAY,EAAZA,YADc;AAEdU,EAAAA,OAAO,EAAPA,OAFc;AAGdU,EAAAA,MAAM,EAANA,MAHc;AAIdC,EAAAA,OAAO,EAAPA;AAJc,CAAf","sourcesContent":["/**\n * Internal dependencies\n */\nimport * as children from './children';\n\n/**\n * Browser dependencies\n */\nconst { TEXT_NODE, ELEMENT_NODE } = window.Node;\n\n/**\n * A representation of a single node within a block's rich text value. If\n * representing a text node, the value is simply a string of the node value.\n * As representing an element node, it is an object of:\n *\n * 1. `type` (string): Tag name.\n * 2. `props` (object): Attributes and children array of WPBlockNode.\n *\n * @typedef {string|Object} WPBlockNode\n */\n\n/**\n * Given a single node and a node type (e.g. `'br'`), returns true if the node\n * corresponds to that type, false otherwise.\n *\n * @param {WPBlockNode} node Block node to test\n * @param {string} type      Node to type to test against.\n *\n * @return {boolean} Whether node is of intended type.\n */\nfunction isNodeOfType( node, type ) {\n\treturn node && node.type === type;\n}\n\n/**\n * Given an object implementing the NamedNodeMap interface, returns a plain\n * object equivalent value of name, value key-value pairs.\n *\n * @see https://dom.spec.whatwg.org/#interface-namednodemap\n *\n * @param {NamedNodeMap} nodeMap NamedNodeMap to convert to object.\n *\n * @return {Object} Object equivalent value of NamedNodeMap.\n */\nexport function getNamedNodeMapAsObject( nodeMap ) {\n\tconst result = {};\n\tfor ( let i = 0; i < nodeMap.length; i++ ) {\n\t\tconst { name, value } = nodeMap[ i ];\n\t\tresult[ name ] = value;\n\t}\n\n\treturn result;\n}\n\n/**\n * Given a DOM Element or Text node, returns an equivalent block node. Throws\n * if passed any node type other than element or text.\n *\n * @throws {TypeError} If non-element/text node is passed.\n *\n * @param {Node} domNode DOM node to convert.\n *\n * @return {WPBlockNode} Block node equivalent to DOM node.\n */\nexport function fromDOM( domNode ) {\n\tif ( domNode.nodeType === TEXT_NODE ) {\n\t\treturn domNode.nodeValue;\n\t}\n\n\tif ( domNode.nodeType !== ELEMENT_NODE ) {\n\t\tthrow new TypeError(\n\t\t\t'A block node can only be created from a node of type text or ' +\n\t\t\t'element.'\n\t\t);\n\t}\n\n\treturn {\n\t\ttype: domNode.nodeName.toLowerCase(),\n\t\tprops: {\n\t\t\t...getNamedNodeMapAsObject( domNode.attributes ),\n\t\t\tchildren: children.fromDOM( domNode.childNodes ),\n\t\t},\n\t};\n}\n\n/**\n * Given a block node, returns its HTML string representation.\n *\n * @param {WPBlockNode} node Block node to convert to string.\n *\n * @return {string} String HTML representation of block node.\n */\nexport function toHTML( node ) {\n\treturn children.toHTML( [ node ] );\n}\n\n/**\n * Given a selector, returns an hpq matcher generating a WPBlockNode value\n * matching the selector result.\n *\n * @param {string} selector DOM selector.\n *\n * @return {Function} hpq matcher.\n */\nexport function matcher( selector ) {\n\treturn ( domNode ) => {\n\t\tlet match = domNode;\n\n\t\tif ( selector ) {\n\t\t\tmatch = domNode.querySelector( selector );\n\t\t}\n\n\t\ttry {\n\t\t\treturn fromDOM( match );\n\t\t} catch ( error ) {\n\t\t\treturn null;\n\t\t}\n\t};\n}\n\nexport default {\n\tisNodeOfType,\n\tfromDOM,\n\ttoHTML,\n\tmatcher,\n};\n"]}