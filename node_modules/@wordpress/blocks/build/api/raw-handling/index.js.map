{"version":3,"sources":["/Users/riad/Workspace/a8c/gutenberg/packages/blocks/src/api/raw-handling/index.js"],"names":["window","console","filterInlineHTML","HTML","phrasingContentReducer","inline","log","getRawTransformations","type","map","transform","isMatch","node","selector","matches","htmlToBlocks","html","rawTransforms","doc","document","implementation","createHTMLDocument","body","innerHTML","Array","from","children","rawTransform","outerHTML","blockName","pasteHandler","plainText","mode","tagName","canUserUseUnfilteredHTML","replace","indexOf","String","prototype","normalize","pieces","hasShortcodes","length","phrasingContentSchema","blockContentSchema","blocks","piece","filters","msListConverter","headRemover","listReducer","imageCorrector","specialCommentConverter","figureContentReducer","blockquoteNormaliser","unshift","iframeRemover","schema","trimmedPlainText","trim","rawHandler"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { flatMap, filter, compact } from 'lodash';\n\n/**\n * Internal dependencies\n */\nimport { createBlock, getBlockTransforms, findTransform } from '../factory';\nimport { getBlockContent } from '../serializer';\nimport { getBlockAttributes, parseWithGrammar } from '../parser';\nimport normaliseBlocks from './normalise-blocks';\nimport specialCommentConverter from './special-comment-converter';\nimport isInlineContent from './is-inline-content';\nimport phrasingContentReducer from './phrasing-content-reducer';\nimport headRemover from './head-remover';\nimport msListConverter from './ms-list-converter';\nimport listReducer from './list-reducer';\nimport imageCorrector from './image-corrector';\nimport blockquoteNormaliser from './blockquote-normaliser';\nimport figureContentReducer from './figure-content-reducer';\nimport shortcodeConverter from './shortcode-converter';\nimport markdownConverter from './markdown-converter';\nimport iframeRemover from './iframe-remover';\nimport { getPhrasingContentSchema } from './phrasing-content';\nimport {\n\tdeepFilterHTML,\n\tisPlain,\n\tremoveInvalidHTML,\n\tgetBlockContentSchema,\n} from './utils';\n\n/**\n * Browser dependencies\n */\nconst { console } = window;\n\nexport { getPhrasingContentSchema };\n\n/**\n * Filters HTML to only contain phrasing content.\n *\n * @param {string} HTML The HTML to filter.\n *\n * @return {string} HTML only containing phrasing content.\n */\nfunction filterInlineHTML( HTML ) {\n\tHTML = deepFilterHTML( HTML, [ phrasingContentReducer ] );\n\tHTML = removeInvalidHTML( HTML, getPhrasingContentSchema(), { inline: true } );\n\n\t// Allows us to ask for this information when we get a report.\n\tconsole.log( 'Processed inline HTML:\\n\\n', HTML );\n\n\treturn HTML;\n}\n\nfunction getRawTransformations() {\n\treturn filter( getBlockTransforms( 'from' ), { type: 'raw' } )\n\t\t.map( ( transform ) => {\n\t\t\treturn transform.isMatch ? transform : {\n\t\t\t\t...transform,\n\t\t\t\tisMatch: ( node ) => transform.selector && node.matches( transform.selector ),\n\t\t\t};\n\t\t} );\n}\n\n/**\n * Converts HTML directly to blocks. Looks for a matching transform for each\n * top-level tag. The HTML should be filtered to not have any text between\n * top-level tags and formatted in a way that blocks can handle the HTML.\n *\n * @param  {Object} $1               Named parameters.\n * @param  {string} $1.html          HTML to convert.\n * @param  {Array}  $1.rawTransforms Transforms that can be used.\n *\n * @return {Array} An array of blocks.\n */\nfunction htmlToBlocks( { html, rawTransforms } ) {\n\tconst doc = document.implementation.createHTMLDocument( '' );\n\n\tdoc.body.innerHTML = html;\n\n\treturn Array.from( doc.body.children ).map( ( node ) => {\n\t\tconst rawTransform = findTransform( rawTransforms, ( { isMatch } ) => isMatch( node ) );\n\n\t\tif ( ! rawTransform ) {\n\t\t\treturn createBlock(\n\t\t\t\t// Should not be hardcoded.\n\t\t\t\t'core/html',\n\t\t\t\tgetBlockAttributes(\n\t\t\t\t\t'core/html',\n\t\t\t\t\tnode.outerHTML\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\tconst { transform, blockName } = rawTransform;\n\n\t\tif ( transform ) {\n\t\t\treturn transform( node );\n\t\t}\n\n\t\treturn createBlock(\n\t\t\tblockName,\n\t\t\tgetBlockAttributes(\n\t\t\t\tblockName,\n\t\t\t\tnode.outerHTML\n\t\t\t)\n\t\t);\n\t} );\n}\n\n/**\n * Converts an HTML string to known blocks. Strips everything else.\n *\n * @param {string}  [options.HTML]                     The HTML to convert.\n * @param {string}  [options.plainText]                Plain text version.\n * @param {string}  [options.mode]                     Handle content as blocks or inline content.\n *                                                     * 'AUTO': Decide based on the content passed.\n *                                                     * 'INLINE': Always handle as inline content, and return string.\n *                                                     * 'BLOCKS': Always handle as blocks, and return array of blocks.\n * @param {Array}   [options.tagName]                  The tag into which content will be inserted.\n * @param {boolean} [options.canUserUseUnfilteredHTML] Whether or not the user can use unfiltered HTML.\n *\n * @return {Array|string} A list of blocks or a string, depending on `handlerMode`.\n */\nexport function pasteHandler( { HTML = '', plainText = '', mode = 'AUTO', tagName, canUserUseUnfilteredHTML = false } ) {\n\t// First of all, strip any meta tags.\n\tHTML = HTML.replace( /<meta[^>]+>/, '' );\n\n\t// If we detect block delimiters, parse entirely as blocks.\n\tif ( mode !== 'INLINE' && HTML.indexOf( '<!-- wp:' ) !== -1 ) {\n\t\treturn parseWithGrammar( HTML );\n\t}\n\n\t// Normalize unicode to use composed characters.\n\t// This is unsupported in IE 11 but it's a nice-to-have feature, not mandatory.\n\t// Not normalizing the content will only affect older browsers and won't\n\t// entirely break the app.\n\t// See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize\n\t// See: https://core.trac.wordpress.org/ticket/30130\n\t// See: https://github.com/WordPress/gutenberg/pull/6983#pullrequestreview-125151075\n\tif ( String.prototype.normalize ) {\n\t\tHTML = HTML.normalize();\n\t}\n\n\t// Parse Markdown (and encoded HTML) if:\n\t// * There is a plain text version.\n\t// * There is no HTML version, or it has no formatting.\n\tif ( plainText && ( ! HTML || isPlain( HTML ) ) ) {\n\t\tHTML = markdownConverter( plainText );\n\n\t\t// Switch to inline mode if:\n\t\t// * The current mode is AUTO.\n\t\t// * The original plain text had no line breaks.\n\t\t// * The original plain text was not an HTML paragraph.\n\t\t// * The converted text is just a paragraph.\n\t\tif (\n\t\t\tmode === 'AUTO' &&\n\t\t\tplainText.indexOf( '\\n' ) === -1 &&\n\t\t\tplainText.indexOf( '<p>' ) !== 0 &&\n\t\t\tHTML.indexOf( '<p>' ) === 0\n\t\t) {\n\t\t\tmode = 'INLINE';\n\t\t}\n\t}\n\n\tif ( mode === 'INLINE' ) {\n\t\treturn filterInlineHTML( HTML );\n\t}\n\n\t// An array of HTML strings and block objects. The blocks replace matched\n\t// shortcodes.\n\tconst pieces = shortcodeConverter( HTML );\n\n\t// The call to shortcodeConverter will always return more than one element\n\t// if shortcodes are matched. The reason is when shortcodes are matched\n\t// empty HTML strings are included.\n\tconst hasShortcodes = pieces.length > 1;\n\n\tif ( mode === 'AUTO' && ! hasShortcodes && isInlineContent( HTML, tagName ) ) {\n\t\treturn filterInlineHTML( HTML );\n\t}\n\n\tconst rawTransforms = getRawTransformations();\n\tconst phrasingContentSchema = getPhrasingContentSchema();\n\tconst blockContentSchema = getBlockContentSchema( rawTransforms );\n\n\tconst blocks = compact( flatMap( pieces, ( piece ) => {\n\t\t// Already a block from shortcode.\n\t\tif ( typeof piece !== 'string' ) {\n\t\t\treturn piece;\n\t\t}\n\n\t\tconst filters = [\n\t\t\tmsListConverter,\n\t\t\theadRemover,\n\t\t\tlistReducer,\n\t\t\timageCorrector,\n\t\t\tphrasingContentReducer,\n\t\t\tspecialCommentConverter,\n\t\t\tfigureContentReducer,\n\t\t\tblockquoteNormaliser,\n\t\t];\n\n\t\tif ( ! canUserUseUnfilteredHTML ) {\n\t\t\t// Should run before `figureContentReducer`.\n\t\t\tfilters.unshift( iframeRemover );\n\t\t}\n\n\t\tconst schema = {\n\t\t\t...blockContentSchema,\n\t\t\t// Keep top-level phrasing content, normalised by `normaliseBlocks`.\n\t\t\t...phrasingContentSchema,\n\t\t};\n\n\t\tpiece = deepFilterHTML( piece, filters, blockContentSchema );\n\t\tpiece = removeInvalidHTML( piece, schema );\n\t\tpiece = normaliseBlocks( piece );\n\n\t\t// Allows us to ask for this information when we get a report.\n\t\tconsole.log( 'Processed HTML piece:\\n\\n', piece );\n\n\t\treturn htmlToBlocks( { html: piece, rawTransforms } );\n\t} ) );\n\n\t// If we're allowed to return inline content and there is only one block\n\t// and the original plain text content does not have any line breaks, then\n\t// treat it as inline paste.\n\tif ( mode === 'AUTO' && blocks.length === 1 ) {\n\t\tconst trimmedPlainText = plainText.trim();\n\n\t\tif ( trimmedPlainText !== '' && trimmedPlainText.indexOf( '\\n' ) === -1 ) {\n\t\t\treturn removeInvalidHTML(\n\t\t\t\tgetBlockContent( blocks[ 0 ] ),\n\t\t\t\tphrasingContentSchema\n\t\t\t);\n\t\t}\n\t}\n\n\treturn blocks;\n}\n\n/**\n * Converts an HTML string to known blocks.\n *\n * @param {string} $1.HTML The HTML to convert.\n *\n * @return {Array} A list of blocks.\n */\nexport function rawHandler( { HTML = '' } ) {\n\t// If we detect block delimiters, parse entirely as blocks.\n\tif ( HTML.indexOf( '<!-- wp:' ) !== -1 ) {\n\t\treturn parseWithGrammar( HTML );\n\t}\n\n\t// An array of HTML strings and block objects. The blocks replace matched\n\t// shortcodes.\n\tconst pieces = shortcodeConverter( HTML );\n\tconst rawTransforms = getRawTransformations();\n\tconst blockContentSchema = getBlockContentSchema( rawTransforms );\n\n\treturn compact( flatMap( pieces, ( piece ) => {\n\t\t// Already a block from shortcode.\n\t\tif ( typeof piece !== 'string' ) {\n\t\t\treturn piece;\n\t\t}\n\n\t\t// These filters are essential for some blocks to be able to transform\n\t\t// from raw HTML. These filters move around some content or add\n\t\t// additional tags, they do not remove any content.\n\t\tconst filters = [\n\t\t\t// Needed to adjust invalid lists.\n\t\t\tlistReducer,\n\t\t\t// Needed to create more and nextpage blocks.\n\t\t\tspecialCommentConverter,\n\t\t\t// Needed to create media blocks.\n\t\t\tfigureContentReducer,\n\t\t\t// Needed to create the quote block, which cannot handle text\n\t\t\t// without wrapper paragraphs.\n\t\t\tblockquoteNormaliser,\n\t\t];\n\n\t\tpiece = deepFilterHTML( piece, filters, blockContentSchema );\n\t\tpiece = normaliseBlocks( piece );\n\n\t\treturn htmlToBlocks( { html: piece, rawTransforms } );\n\t} ) );\n}\n"]}